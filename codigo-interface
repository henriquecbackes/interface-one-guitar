//Sessão de includes

#include <Adafruit_TFTLCD.h>
#include <Adafruit_GFX.h>
#include <TouchScreen.h>
#include <avr/pgmspace.h>
#include "TimerOne.h"
#include <RotaryEncoder.h>
#include <SoftwareSerial.h>
#include <EEPROM.h>
#include <Fonts/Picopixel.h>

//Sessão de predefinições

SoftwareSerial mySerial(31, 33); // RX, TX
RotaryEncoder encoder(A14, A15);
Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 364);

#define _5Vpin 22
#define Modo44  0
#define Modo34  1
#define Modo24  2
#define PinoBuzzer 49
#define TERMINA 20
#define CIMA  50
#define BAIXO 51
#define MetronomoReset MetronomoCont=-1
#define PEDALdef up=0; upAnt=0; down=0; downAnt=0; corda1=WHITE; Pcorda1=0; Pcorda1Ant=0; corda2=WHITE; Pcorda2=0; Pcorda2Ant=0; corda3=WHITE; Pcorda3=0; Pcorda3Ant=0; corda4=WHITE; Pcorda4=0; Pcorda4Ant=0; corda5=WHITE; Pcorda5=0; Pcorda5Ant=0; corda6=WHITE; Pcorda6=0; Pcorda6Ant=0;
#define PEDALmem upAnt=up; downAnt=down; Pcorda1Ant=Pcorda1; Pcorda2Ant=Pcorda2; Pcorda3Ant=Pcorda3; Pcorda4Ant=Pcorda4; Pcorda5Ant=Pcorda5; Pcorda6Ant=Pcorda6;
#define LCD_CS A3
#define LCD_CD A2
#define LCD_WR A1
#define LCD_RD A0
#define LCD_RESET A4
#define TS_MINX 111
#define TS_MINY 120
#define TS_MAXX 970
#define TS_MAXY 913
#define YP A3
#define XM A2
#define YM 9
#define XP 8
#define BLACK      0x0000
#define BLUE       0x001F
#define DARK_BLUE  0x002F
#define RED        0xF800
#define GREEN      0x07E0
#define DARK_GREEN 0xDF00
#define CYAN       0x07FF
#define MAGENTA    0xF81F
#define YELLOW     0xFFE0
#define WHITE      0xFFFF
#define ORANGE     tft.color565(252, 214, 42)
#define LOGO 1000
#define HOME -2
#define VOLTAR -1
#define INICIAL 0
#define SELECIONAR 100
#define EX1_44 104
#define EX2_44 105
#define EX3_44 106
#define EX4_44 107
#define EX1_34 108
#define EX2_34 109
#define EX3_34 110
#define EX4_34 111
#define EX1_24 112
#define EX2_24 113
#define EX3_24 114
#define EX4_24 115
#define MAIS_BPM 116
#define MENOS_BPM 117
#define SELECIONAR_MARCHA 120
#define SELECIONAR_BAIAO 121
#define SELECIONAR_VALSA 122
#define SELECIONAR_GUARANIA 123
#define SELECIONAR_CANCAO 124
#define SELECIONAR_POP 125
#define PEDAL 200
#define PROGRAMAR 300
#define RITMOS_24 301
#define RITMOS_34 302
#define RITMOS_44 303
#define VER_RITMO1_24 304
#define VER_RITMO2_24 305
#define VER_RITMO3_24 306
#define VER_RITMO4_24 307
#define VER_RITMO1_34 308
#define VER_RITMO2_34 309
#define VER_RITMO3_34 310
#define VER_RITMO4_34 311
#define VER_RITMO1_44 312
#define VER_RITMO2_44 313
#define VER_RITMO3_44 314
#define VER_RITMO4_44 315
#define CONF_RITMO1_24 316
#define CONF_RITMO2_24 317
#define CONF_RITMO3_24 318
#define CONF_RITMO4_24 319
#define CONF_RITMO1_34 320
#define CONF_RITMO2_34 321
#define CONF_RITMO3_34 322
#define CONF_RITMO4_34 323
#define CONF_RITMO1_44 324
#define CONF_RITMO2_44 325
#define CONF_RITMO3_44 326
#define CONF_RITMO4_44 327
#define PLAY_RITMO1_24 328
#define PLAY_RITMO2_24 329
#define PLAY_RITMO3_24 330
#define PLAY_RITMO4_24 331
#define PLAY_RITMO1_34 332
#define PLAY_RITMO2_34 333
#define PLAY_RITMO3_34 334
#define PLAY_RITMO4_34 335
#define PLAY_RITMO1_44 336
#define PLAY_RITMO2_44 337
#define PLAY_RITMO3_44 338
#define PLAY_RITMO4_44 339
#define AFINAR 400
#define DICIONARIO 500
#define ACORDE_C 501
#define ACORDE_D 502
#define ACORDE_E 503
#define ACORDE_F 504
#define ACORDE_G 505
#define ACORDE_A 506
#define ACORDE_B 507
#define ACORDE_B7 508
#define ACORDE_A7 509
#define RITMO_MARCHA 510
#define RITMO_BAIAO 511
#define RITMO_VALSA 512
#define RITMO_GUARANIA 513
#define RITMO_CANCAO 514
#define RITMO_POP 515
#define HELP_INICIAL 600
#define HELP_COMPASSO 602
#define HELP_EXERCICIO 603
#define HELP_PEDAL 604
#define HELP_PROGRAMAR 605
#define HELP_SELRITMO 606
#define HELP_VER 607
#define HELP_AFINAR 608
#define HELP_DICIONARIO 609
#define HELP_ACORDES 610
#define HELP_RITMOS 611
#define ChordC 1
#define ChordCm 2
#define ChordD 3
#define ChordDm 4
#define ChordE 5
#define ChordEm 6
#define ChordF 7
#define ChordFm 8
#define ChordG 9
#define ChordGm 10
#define ChordA 11
#define ChordAm 12
#define ChordB 13
#define ChordBm 14
#define ChordA7 15
#define ChordB7 16
#define NONE 0

//Sessão de variáveis

const unsigned char logo[]PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x7f, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x1f, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x7f, 0xff, 0x8f, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xff, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xff, 0xe0, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x07, 0xff, 0xf0, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0xff, 0xf8, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xfe, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xfe, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0x01, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0x81, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xfe, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0xf8, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x07, 0xff, 0xf8, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xc0, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7c, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char oneGuitar[]PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x01, 0xff, 0x81, 0xff, 0xe1, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0xff, 0x81, 0xff, 0xe3, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0xff, 0x81, 0xff, 0xef, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0xc1, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xfe, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x7f, 0xc0, 0x1f, 0xfe, 0x01, 0xff, 0x00, 0x0f, 0xf8, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x7f, 0xc0, 0x1f, 0xfc, 0x01, 0xff, 0x80, 0x1f, 0xf0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf8, 0x00, 0xff, 0x80, 0x1f, 0xf0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xe0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xc0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xc0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xc0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xc0, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xc1, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0x80, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0xff, 0x80, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0xff, 0x80, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x01, 0xff, 0x80, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x01, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x03, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x1f, 0xfe, 0x00, 0x1f, 0xf0, 0x00, 0xff, 0x80, 0x1f, 0xf8, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xf0, 0x00, 0xff, 0x80, 0x1f, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0x0f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xff, 0xf0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xff, 0xc0, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0xff, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0xfe, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0xfc, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00,
    0x07, 0xfc, 0x00, 0x01, 0xfc, 0x03, 0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0x1f, 0xff, 0x00,
    0x0f, 0xf8, 0x00, 0x01, 0xfc, 0x03, 0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x3f, 0xff, 0x00,
    0x0f, 0xf8, 0x00, 0x01, 0xfc, 0x03, 0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x7f, 0xff, 0x00,
    0x0f, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00,
    0x1f, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00,
    0x1f, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x3f, 0xfe, 0x01, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0x00, 0x7f, 0xf0, 0x1f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00,
    0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x00, 0xff, 0xc0, 0x0f, 0xf0, 0x00, 0xff, 0xf0, 0x7f, 0x00,
    0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x00, 0xff, 0x80, 0x0f, 0xf0, 0x00, 0x7f, 0xe0, 0x7f, 0x00,
    0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0xc0, 0x7f, 0x00,
    0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x01, 0xff, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0xc0, 0x7f, 0x00,
    0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xc0, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x01, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x7f, 0x00,
    0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xc0, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x01, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xc0, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xc0, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xc0, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xf0, 0x00, 0x7f, 0xff, 0xc0, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xf0, 0x00, 0x07, 0xff, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xf0, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xf0, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x1f, 0xf0, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x0f, 0xf8, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x0f, 0xf8, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x0f, 0xf8, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x0f, 0xfc, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x07, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x3f, 0xc0, 0x03, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xfe, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x07, 0xff, 0x00, 0x03, 0xfe, 0x00, 0x3f, 0xc0, 0x07, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xff, 0x00, 0x01, 0xfe, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x03, 0xff, 0x80, 0x03, 0xfe, 0x00, 0x3f, 0xe0, 0x07, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xff, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x03, 0xff, 0xe0, 0x07, 0xfe, 0x00, 0x3f, 0xe0, 0x1f, 0xfe, 0x00, 0x1f, 0xe0, 0x01, 0xff, 0x00, 0x01, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00,
    0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xf8, 0x7f, 0xff, 0x00, 0x3f, 0xe0, 0x01, 0xff, 0xc1, 0x80, 0xff, 0xc0, 0x7f, 0xf8, 0x00, 0xff, 0x80, 0x00, 0x00,
    0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfe, 0x00, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xfd, 0xff, 0xe1, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xf7, 0xff, 0x0f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf9, 0xff, 0xe1, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xe0, 0x3f, 0xff, 0xe7, 0xff, 0x0f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xf1, 0xff, 0xe1, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xc0, 0x0f, 0xff, 0xc7, 0xff, 0x0f, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char engrenagem[]PROGMEM = {
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x0e, 0x00, 0x00,
    0x01, 0x0e, 0x10, 0x00,
    0x03, 0x8e, 0x38, 0x00,
    0x07, 0xff, 0xfc, 0x00,
    0x03, 0xff, 0xf8, 0x00,
    0x01, 0xff, 0xf0, 0x00,
    0x01, 0xe0, 0xf0, 0x00,
    0x01, 0xc0, 0x70, 0x00,
    0x0f, 0xc0, 0x7e, 0x00,
    0x0f, 0xc0, 0x7e, 0x00,
    0x0f, 0xc0, 0x7e, 0x00,
    0x01, 0xc0, 0x70, 0x00,
    0x01, 0xe0, 0xf0, 0x00,
    0x01, 0xff, 0xf0, 0x00,
    0x03, 0xff, 0xf8, 0x00,
    0x07, 0xff, 0xfc, 0x00,
    0x03, 0x8e, 0x38, 0x00,
    0x01, 0x0e, 0x10, 0x00,
    0x00, 0x0e, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
};

bool AcordesPorCorda[14][6] = {
    /* C */   {1,1,1,1,1,0},
    /* D */   {1,1,1,1,0,0},
    /* E */   {1,1,1,1,1,1},
    /* F */   {1,1,1,1,1,1},
    /* G */   {1,1,1,1,1,1},
    /* A */   {1,1,1,1,1,0},
    /* B */   {1,1,1,1,1,0},

    /* Cm */  {1,1,1,1,1,0},
    /* Dm */  {1,1,1,1,0,0},
    /* Em */  {1,1,1,1,1,1},
    /* Fm */  {1,1,1,1,1,1},
    /* Gm */  {1,1,1,1,1,1},
    /* Am */  {1,1,1,1,1,0},
    /* Bm */  {1,1,1,1,1,0},
};

boolean buttonEnabled = true;
bool buttonPress=0;
bool refresh=0;
bool pausa=1;
bool updateEnable=0;
bool preCount=1;
bool communication=1;
bool resposta=1;
bool encoderRead=0;
bool MetronomoEnable = true;
bool FlagBotaoEncoder = false;
bool EnableMetronomoBIPE = false;
bool mandaDirecaoEnable=0;
bool telaCancao=0;
bool telaPop=0;
bool telaValsa=0;
bool telaGuarania=0;
bool telaMarcha=0;
bool telaBaiao=0;
bool telaPlay=0;
bool telaConfig=0;
bool buttonHelp=0;

int tela=LOGO;
int exTela=tela;
uint8_t selRitmo=0;
uint8_t selectRitmo=0;
uint8_t telaVer=0;
uint8_t telaExercicio=0;
uint8_t telaRitmo=0;
uint8_t acorde=0;
uint8_t corda=0;
uint16_t corda1=WHITE;
uint16_t corda2=WHITE;
uint16_t corda3=WHITE;
uint16_t corda4=WHITE;
uint16_t corda5=WHITE;
uint16_t corda6=WHITE;
uint8_t up=0, upAnt=0;
uint8_t down=0, downAnt=0;
uint8_t Pcorda1=0, Pcorda1Ant=0;
uint8_t Pcorda2=0, Pcorda2Ant=0;
uint8_t Pcorda3=0, Pcorda3Ant=0;
uint8_t Pcorda4=0, Pcorda4Ant=0;
uint8_t Pcorda5=0, Pcorda5Ant=0;
uint8_t Pcorda6=0, Pcorda6Ant=0;
uint16_t beep=GREEN;
uint16_t subida=GREEN;
uint16_t descida=GREEN;
uint8_t a;
uint8_t b=0;
uint8_t i=0;
uint8_t u;
uint8_t debounce=0;
int bolinha=-1;
uint8_t k=0;
uint16_t tempoComunic=0;
uint8_t pos = 0;
uint8_t ad=0;
int8_t direcao=0;
int setinha=-1;
uint8_t ritmo=0;
uint16_t ContadorTempoBPM = 0;
uint16_t tempo = 200;
int MetronomoCont =-1;
uint16_t MetronomoContDesliga = 0;
uint16_t IntervaloBPM = 0;
uint8_t ModoDeBatida = Modo44;
uint16_t BPM = 100;

int Primeiro44[32] =  {ChordD,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordA7,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES EXERCÍCIO 1 4/4
int Segundo44[32] = {ChordD,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordA7,NONE,NONE,NONE,NONE,NONE,NONE,NONE, NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordG,NONE,NONE,NONE,NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES EXERCÍCIO 2 4/4
int Terceiro44[32] =  { ChordD,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordG,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordA7,NONE,NONE,NONE,NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES  EXERCÍCIO 3 4/4
int Quarto44[32] =    { ChordD,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordG,NONE,NONE,NONE,NONE,NONE,NONE,NONE,  ChordA7,NONE,NONE,NONE,NONE,NONE,NONE,NONE, ChordG,NONE,NONE,NONE,NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES  EXERCÍCIO 4 4/4

int CancaoDirecao[32] = {BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE };   // RITMO DE  CANC O 4/4
int PopDirecao[32]   = {BAIXO,BAIXO,CIMA,CIMA,BAIXO,BAIXO,CIMA,NONE,BAIXO,BAIXO,CIMA,CIMA,BAIXO,BAIXO,CIMA,NONE,BAIXO,BAIXO,CIMA,CIMA,BAIXO,BAIXO,CIMA,NONE,BAIXO,BAIXO,CIMA,CIMA,BAIXO,BAIXO,CIMA,NONE  };        // RITMO DE  POP 4/4

int Primeiro34[24] =  { ChordE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,ChordA,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE};                            // SEQUENCIA DE ACORDES EXERCÍCIO 1 3/4
int Segundo34[24] = { ChordE,NONE,NONE,NONE,NONE,NONE,ChordA,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,ChordB7,NONE,NONE,NONE,NONE,NONE};                 // SEQUENCIA DE ACORDES EXERCÍCIO 2 3/4
int Terceiro34[24]  =  {ChordE,NONE,NONE,NONE,NONE,NONE,ChordB7,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,ChordA,NONE,NONE,NONE,NONE,NONE};                 // SEQUENCIA DE ACORDES EXERCÍCIO 3 3/4
int Quarto34[24]    =  {ChordE,NONE,NONE,NONE,NONE,NONE,ChordB7,NONE,NONE,NONE,NONE,NONE,ChordA,NONE,NONE,NONE,NONE,NONE,ChordB7,NONE,NONE,NONE,NONE,NONE};     // SEQUENCIA DE ACORDES EXERCÍCIO 4 3/4

int ValsaDirecao[24]        = {BAIXO,NONE,CIMA,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,CIMA,NONE,BAIXO,NONE,CIMA,NONE,CIMA,NONE };   // RITMO DE  VALSA  3/4
int GuaraniaDirecao[24]  = {BAIXO,CIMA,BAIXO,CIMA,BAIXO,NONE,BAIXO,CIMA,BAIXO,CIMA,BAIXO,NONE,BAIXO,CIMA,BAIXO,CIMA,BAIXO,NONE,BAIXO,CIMA,BAIXO,CIMA,BAIXO,NONE, };   // RITMO DE  GUARANIA 3/4

int Primeiro24[32] =  { ChordE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE, NONE,NONE,NONE,NONE,   NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES EXERCÍCIO 1 2/4
int Segundo24[32] = { ChordA,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE, NONE,NONE,NONE,NONE,   NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES EXERCÍCIO 2 2/4
int Terceiro24[32] =  { ChordE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  ChordA,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,   NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES EXERCÍCIO 3 2/4
int Quarto24[32] =    { ChordE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  ChordA,NONE,NONE,NONE,   NONE,NONE,NONE,NONE, ChordE,NONE,NONE,NONE,  NONE,NONE,NONE,NONE,  ChordA,NONE,NONE,NONE,   NONE,NONE,NONE,NONE};   // SEQUENCIA DE ACORDES EXERCÍCIO 4 2/4

int MarchaDirecao[32] = {BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE,BAIXO,NONE  };   // RITMO DE  MARCHA 2/4
int BaiaoDirecao[32]   = {BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO,BAIXO };   // RITMO DE  BAIAO 2/4

char rx_buff;

//Sessão de funções

void drawBitmap(int16_t x, int16_t y,const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) { //desenha bitmap na tela

  int16_t i, j, byteWidth = (w + 7) / 8;
  uint8_t byte;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      if(i & 7) byte <<= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x80) tft.drawPixel(x+i, y+j, color);
    }
  }
}

void setup() { //definições iniciais do programa

  tft.reset();
  uint16_t identifier = tft.readID();
  tft.begin(identifier);
  tft.setRotation(1);
  tft.fillScreen(WHITE);

  pinMode(_5Vpin, OUTPUT);
  digitalWrite(_5Vpin, HIGH); //alimentação +5v para o módulo Bluetooth
  pinMode(PinoBuzzer,OUTPUT);
  Timer1.initialize(1000); // Inicializa o Timer1 e configura para um período de 0,001 segundos
  Timer1.attachInterrupt(timerInterrupt); // Configura a função timerInterrupt() como a função para ser chamada a cada interrupção do Timer1
  Serial.begin(38400);
  mySerial.begin(38400);

  //desenhar logo da tela de entrada
  drawBitmap(106, 30, logo, 80, 87, DARK_BLUE);
  drawBitmap(55, 105, oneGuitar, 202, 105, BLACK);
}

//verificação de clique na tela
void check(void) {

  TSPoint p = ts.getPoint();
  if (p.z > ts.pressureThreshhold) { //se a tela for pressionada
    buttonPress=1; //flag de pressionamento de botão
    p.x = map(p.x, TS_MAXX, TS_MINX, 0, 240);
    p.y = map(p.y, TS_MAXY, TS_MINY, 0, 320);

    //identificação da tela
    if(tela!=INICIAL) {
      //Voltar
      if(p.y>=0 && p.y<=40 && p.x>=10 && p.x<=40 && buttonEnabled){ //verificação da área de pressionamento
        tela = VOLTAR; //atualização de tela
      }
      //Home
      if(p.y>=41 && p.y<=70 && p.x>=10 && p.x<=40 && buttonEnabled){
        tela = HOME;
      }
    }

    if(telaConfig==0 && telaPlay==0){ // variáveis flags de identificação de tela
      //botão de help
      if(p.y>=300 && p.y<=330 && p.x>=10 && p.x<=40 && buttonEnabled) {
        switch(tela) { //identificação de tela para realização da troca
        case INICIAL: tela=HELP_INICIAL; break;
        case SELECIONAR: tela=HELP_COMPASSO; break;
        case PEDAL: tela=HELP_PEDAL; break;
        case PROGRAMAR: tela=HELP_PROGRAMAR; break;
        case RITMOS_24: tela=HELP_SELRITMO; break;
        case RITMOS_34: tela=HELP_SELRITMO; break;
        case RITMOS_44: tela=HELP_SELRITMO; break;
        case AFINAR: tela=HELP_AFINAR; break;
        case DICIONARIO: tela=HELP_DICIONARIO; break;
        case ACORDE_C: tela=HELP_ACORDES; break;
        case ACORDE_D: tela=HELP_ACORDES; break;
        case ACORDE_E: tela=HELP_ACORDES; break;
        case ACORDE_F: tela=HELP_ACORDES; break;
        case ACORDE_G: tela=HELP_ACORDES; break;
        case ACORDE_A: tela=HELP_ACORDES; break;
        case ACORDE_B: tela=HELP_ACORDES; break;
        case ACORDE_B7: tela=HELP_ACORDES; break;
        case ACORDE_A7: tela=HELP_ACORDES; break;
        case RITMO_MARCHA: tela=HELP_RITMOS; break;
        case RITMO_BAIAO: tela=HELP_RITMOS; break;
        case RITMO_VALSA: tela=HELP_RITMOS; break;
        case RITMO_GUARANIA: tela=HELP_RITMOS; break;
        case RITMO_CANCAO: tela=HELP_RITMOS; break;
        case RITMO_POP: tela=HELP_RITMOS; break;
        default: break;
        }
        // variáveis flags de identificação de tela
        if(telaExercicio!=0) tela=HELP_EXERCICIO;
        if(telaVer) tela=HELP_VER;
      }
    }

    if(telaExercicio!=0) {

      // +
      if(p.y>=100 && p.y<=130 && p.x>=10 && p.x<=40 && buttonEnabled){
        BPM--;
        refresh=1; //variável flag para atualização de tela
      }

      // -
      if(p.y>=210 && p.y<=240 && p.x>=10 && p.x<=40 && buttonEnabled){
        BPM++;
        refresh=1;
      }

      // beep
      if(p.y>=250 && p.y<=280 && p.x>=10 && p.x<=40 && buttonEnabled){
        //verificação de estado do botão do buzzer
        if(beep==GREEN){beep=RED; EnableMetronomoBIPE=0;}
        else if(beep==RED) { beep=GREEN; EnableMetronomoBIPE=1;}
        refresh=1;
      }

    }

    if(telaPlay) {
      // +
      if(p.y>=100 && p.y<=130 && p.x>=210 && p.x<=240 && buttonEnabled){
        BPM--;
        refresh=1;
      }

      // -
      if(p.y>=210 && p.y<=240 && p.x>=210 && p.x<=240 && buttonEnabled){
        BPM++;
        refresh=1;
      }

    }

    switch(tela) {
    //dentro da tela de selecionar exercicio
    case SELECIONAR_CANCAO:
      //ex1
      if(p.y>=25 && p.y<=165 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX1_44;
        //variáveis de identificação de tela
        telaExercicio=4;
        telaCancao=1;
      }

      //ex2
      else if(p.y>=180 && p.y<=315 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX2_44;
        telaExercicio=4;
        telaCancao=1;
      }

      //ex3
      else if(p.y>=25 && p.y<=165 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX3_44;
        telaExercicio=4;
        telaCancao=1;
      }

      //ex4
      else if(p.y>=180 && p.y<=315 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX4_44;
        telaExercicio=4;
        telaCancao=1;
      }
      break;

    case SELECIONAR_POP:
      //ex1
      if(p.y>=25 && p.y<=165 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX1_44;
        telaExercicio=4;
        telaPop=1;
      }

      //ex2
      else if(p.y>=180 && p.y<=315 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX2_44;
        telaExercicio=4;
        telaPop=1;
      }

      //ex3
      else if(p.y>=25 && p.y<=165 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX3_44;
        telaExercicio=4;
        telaPop=1;
      }

      //ex4
      else if(p.y>=180 && p.y<=315 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX4_44;
        telaExercicio=4;
        telaPop=1;
      }
      break;


    case SELECIONAR_VALSA:
      //ex1
      if(p.y>=25 && p.y<=165 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX1_34;
        telaExercicio=3;
        telaValsa=1;
      }

      //ex2
      else if(p.y>=180 && p.y<=315 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX2_34;
        telaExercicio=3;
        telaValsa=1;
      }

      //ex3
      else if(p.y>=25 && p.y<=165 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX3_34;
        telaExercicio=3;
        telaValsa=1;
      }

      //ex4
      else if(p.y>=180 && p.y<=315 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX4_34;
        telaExercicio=3;
        telaValsa=1;
      }
      break;

    case SELECIONAR_GUARANIA:
      //ex1
      if(p.y>=25 && p.y<=165 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX1_34;
        telaExercicio=3;
        telaGuarania=1;
      }

      //ex2
      else if(p.y>=180 && p.y<=315 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX2_34;
        telaExercicio=3;
        telaGuarania=1;
      }

      //ex3
      else if(p.y>=25 && p.y<=165 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX3_34;
        telaExercicio=3;
        telaGuarania=1;
      }

      //ex4
      else if(p.y>=180 && p.y<=315 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX4_34;
        telaExercicio=3;
        telaGuarania=1;
      }
      break;


    case SELECIONAR_MARCHA:
      //ex1
      if(p.y>=25 && p.y<=165 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX1_24;
        telaExercicio=2;
        telaMarcha=1;
      }

      //ex2
      else if(p.y>=180 && p.y<=315 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX2_24;
        telaExercicio=2;
        telaMarcha=1;
      }

      //ex3
      else if(p.y>=25 && p.y<=165 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX3_24;
        telaExercicio=2;
        telaMarcha=1;
      }

      //ex4
      else if(p.y>=180 && p.y<=315 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX4_24;
        telaExercicio=2;
        telaMarcha=1;
      }
      break;

    case SELECIONAR_BAIAO:
      //ex1
      if(p.y>=25 && p.y<=165 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX1_24;
        telaExercicio=2;
        telaBaiao=1;
      }

      //ex2
      else if(p.y>=180 && p.y<=315 && p.x>=90 && p.x<=140 && buttonEnabled){
        tela = EX2_24;
        telaExercicio=2;
        telaBaiao=1;
      }

      //ex3
      else if(p.y>=25 && p.y<=165 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX3_24;
        telaExercicio=2;
        telaBaiao=1;
      }

      //ex4
      else if(p.y>=180 && p.y<=315 && p.x>=160 && p.x<=210 && buttonEnabled){
        tela = EX4_24;
        telaExercicio=2;
        telaBaiao=1;
      }
      break;


    case SELECIONAR:
      //Marcha
      if(p.y>=100 && p.y<=205 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = SELECIONAR_MARCHA;
      }
      //Baião
      if(p.y>=220 && p.y<=325 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = SELECIONAR_BAIAO;
      }

      //Valsa
      else if(p.y>=100 && p.y<=205 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = SELECIONAR_VALSA;
      }
      //Guarania
      if(p.y>=220 && p.y<=325 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = SELECIONAR_GUARANIA;
      }

      //Canção
      else if(p.y>=100 && p.y<=205 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = SELECIONAR_CANCAO;
      }
      //Pop
      if(p.y>=220 && p.y<=325 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = SELECIONAR_POP;
      }
      break;

      //dentro da tela de programar ritmos
    case CONF_RITMO1_24:
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        //alteração da direção selecionada
        switch(direcao) {
        case 0: EEPROM.write(0, NONE); break; //escrita no endereço de memória
        case 1: EEPROM.write(0, BAIXO); break;
        case 2: EEPROM.write(0, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(1, NONE); break;
        case 1: EEPROM.write(1, BAIXO); break;
        case 2: EEPROM.write(1, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(2, NONE); break;
        case 1: EEPROM.write(2, BAIXO); break;
        case 2: EEPROM.write(2, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(3, NONE); break;
        case 1: EEPROM.write(3, BAIXO); break;
        case 2: EEPROM.write(3, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO2_24:
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(4, NONE); break;
        case 1: EEPROM.write(4, BAIXO); break;
        case 2: EEPROM.write(4, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(5, NONE); break;
        case 1: EEPROM.write(5, BAIXO); break;
        case 2: EEPROM.write(5, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(6, NONE); break;
        case 1: EEPROM.write(6, BAIXO); break;
        case 2: EEPROM.write(6, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(7, NONE); break;
        case 1: EEPROM.write(7, BAIXO); break;
        case 2: EEPROM.write(7, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO3_24:
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(8, NONE); break;
        case 1: EEPROM.write(8, BAIXO); break;
        case 2: EEPROM.write(8, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(9, NONE); break;
        case 1: EEPROM.write(9, BAIXO); break;
        case 2: EEPROM.write(9, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(10, NONE); break;
        case 1: EEPROM.write(10, BAIXO); break;
        case 2: EEPROM.write(10, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(11, NONE); break;
        case 1: EEPROM.write(11, BAIXO); break;
        case 2: EEPROM.write(11, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      break;

    case CONF_RITMO4_24:
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(12, NONE); break;
        case 1: EEPROM.write(12, BAIXO); break;
        case 2: EEPROM.write(12, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(13, NONE); break;
        case 1: EEPROM.write(13, BAIXO); break;
        case 2: EEPROM.write(13, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(14, NONE); break;
        case 1: EEPROM.write(14, BAIXO); break;
        case 2: EEPROM.write(14, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(15, NONE); break;
        case 1: EEPROM.write(15, BAIXO); break;
        case 2: EEPROM.write(15, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO1_34:
      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(16, NONE); break;
        case 1: EEPROM.write(16, BAIXO); break;
        case 2: EEPROM.write(16, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(17, NONE); break;
        case 1: EEPROM.write(17, BAIXO); break;
        case 2: EEPROM.write(17, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(18, NONE); break;
        case 1: EEPROM.write(18, BAIXO); break;
        case 2: EEPROM.write(18, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(19, NONE); break;
        case 1: EEPROM.write(19, BAIXO); break;
        case 2: EEPROM.write(19, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(20, NONE); break;
        case 1: EEPROM.write(20, BAIXO); break;
        case 2: EEPROM.write(20, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(21, NONE); break;
        case 1: EEPROM.write(21, BAIXO); break;
        case 2: EEPROM.write(21, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO2_34:
      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(22, NONE); break;
        case 1: EEPROM.write(22, BAIXO); break;
        case 2: EEPROM.write(22, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(23, NONE); break;
        case 1: EEPROM.write(23, BAIXO); break;
        case 2: EEPROM.write(23, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(24, NONE); break;
        case 1: EEPROM.write(24, BAIXO); break;
        case 2: EEPROM.write(24, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(25, NONE); break;
        case 1: EEPROM.write(25, BAIXO); break;
        case 2: EEPROM.write(25, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(26, NONE); break;
        case 1: EEPROM.write(26, BAIXO); break;
        case 2: EEPROM.write(26, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(27, NONE); break;
        case 1: EEPROM.write(27, BAIXO); break;
        case 2: EEPROM.write(27, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO3_34:
      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(28, NONE); break;
        case 1: EEPROM.write(28, BAIXO); break;
        case 2: EEPROM.write(28, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(29, NONE); break;
        case 1: EEPROM.write(29, BAIXO); break;
        case 2: EEPROM.write(29, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(30, NONE); break;
        case 1: EEPROM.write(30, BAIXO); break;
        case 2: EEPROM.write(30, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(31, NONE); break;
        case 1: EEPROM.write(31, BAIXO); break;
        case 2: EEPROM.write(31, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(32, NONE); break;
        case 1: EEPROM.write(32, BAIXO); break;
        case 2: EEPROM.write(32, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(33, NONE); break;
        case 1: EEPROM.write(33, BAIXO); break;
        case 2: EEPROM.write(33, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO4_34:
      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(34, NONE); break;
        case 1: EEPROM.write(34, BAIXO); break;
        case 2: EEPROM.write(34, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(35, NONE); break;
        case 1: EEPROM.write(35, BAIXO); break;
        case 2: EEPROM.write(35, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(36, NONE); break;
        case 1: EEPROM.write(36, BAIXO); break;
        case 2: EEPROM.write(36, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(37, NONE); break;
        case 1: EEPROM.write(37, BAIXO); break;
        case 2: EEPROM.write(37, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(38, NONE); break;
        case 1: EEPROM.write(38, BAIXO); break;
        case 2: EEPROM.write(38, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(39, NONE); break;
        case 1: EEPROM.write(39, BAIXO); break;
        case 2: EEPROM.write(39, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      break;

    case CONF_RITMO1_44:
      if(p.y>=20 && p.y<=50 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(40, NONE); break;
        case 1: EEPROM.write(40, BAIXO); break;
        case 2: EEPROM.write(40, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(41, NONE); break;
        case 1: EEPROM.write(41, BAIXO); break;
        case 2: EEPROM.write(41, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(42, NONE); break;
        case 1: EEPROM.write(42, BAIXO); break;
        case 2: EEPROM.write(42, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(43, NONE); break;
        case 1: EEPROM.write(43, BAIXO); break;
        case 2: EEPROM.write(43, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(44, NONE); break;
        case 1: EEPROM.write(44, BAIXO); break;
        case 2: EEPROM.write(44, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(45, NONE); break;
        case 1: EEPROM.write(45, BAIXO); break;
        case 2: EEPROM.write(45, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(46, NONE); break;
        case 1: EEPROM.write(46, BAIXO); break;
        case 2: EEPROM.write(46, CIMA); break;

        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=300 && p.y<=330 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(47, NONE); break;
        case 1: EEPROM.write(47, BAIXO); break;
        case 2: EEPROM.write(47, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }



      break;

    case CONF_RITMO2_44:
      if(p.y>=20 && p.y<=50 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(48, NONE); break;
        case 1: EEPROM.write(48, BAIXO); break;
        case 2: EEPROM.write(48, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(49, NONE); break;
        case 1: EEPROM.write(49, BAIXO); break;
        case 2: EEPROM.write(49, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(50, NONE); break;
        case 1: EEPROM.write(50, BAIXO); break;
        case 2: EEPROM.write(50, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(51, NONE); break;
        case 1: EEPROM.write(51, BAIXO); break;
        case 2: EEPROM.write(51, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(52, NONE); break;
        case 1: EEPROM.write(52, BAIXO); break;
        case 2: EEPROM.write(52, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(53, NONE); break;
        case 1: EEPROM.write(53, BAIXO); break;
        case 2: EEPROM.write(53, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(54, NONE); break;
        case 1: EEPROM.write(54, BAIXO); break;
        case 2: EEPROM.write(54, CIMA); break;

        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=300 && p.y<=330 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(55, NONE); break;
        case 1: EEPROM.write(55, BAIXO); break;
        case 2: EEPROM.write(55, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }



      break;

    case CONF_RITMO3_44:
      if(p.y>=20 && p.y<=50 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(56, NONE); break;
        case 1: EEPROM.write(56, BAIXO); break;
        case 2: EEPROM.write(56, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(57, NONE); break;
        case 1: EEPROM.write(57, BAIXO); break;
        case 2: EEPROM.write(57, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(58, NONE); break;
        case 1: EEPROM.write(58, BAIXO); break;
        case 2: EEPROM.write(58, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(59, NONE); break;
        case 1: EEPROM.write(59, BAIXO); break;
        case 2: EEPROM.write(59, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(60, NONE); break;
        case 1: EEPROM.write(60, BAIXO); break;
        case 2: EEPROM.write(60, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(61, NONE); break;
        case 1: EEPROM.write(61, BAIXO); break;
        case 2: EEPROM.write(61, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(62, NONE); break;
        case 1: EEPROM.write(62, BAIXO); break;
        case 2: EEPROM.write(62, CIMA); break;

        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=300 && p.y<=330 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(63, NONE); break;
        case 1: EEPROM.write(63, BAIXO); break;
        case 2: EEPROM.write(63, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }



      break;

    case CONF_RITMO4_44:
      if(p.y>=20 && p.y<=50 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(64, NONE); break;
        case 1: EEPROM.write(64, BAIXO); break;
        case 2: EEPROM.write(64, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      if(p.y>=60 && p.y<=90 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(65, NONE); break;
        case 1: EEPROM.write(65, BAIXO); break;
        case 2: EEPROM.write(65, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=100 && p.y<=130 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(66, NONE); break;
        case 1: EEPROM.write(66, BAIXO); break;
        case 2: EEPROM.write(66, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=140 && p.y<=170 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(67, NONE); break;
        case 1: EEPROM.write(67, BAIXO); break;
        case 2: EEPROM.write(67, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=180 && p.y<=210 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(68, NONE); break;
        case 1: EEPROM.write(68, BAIXO); break;
        case 2: EEPROM.write(68, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=220 && p.y<=250 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(69, NONE); break;
        case 1: EEPROM.write(69, BAIXO); break;
        case 2: EEPROM.write(69, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=260 && p.y<=290 && p.x>=90 && p.x<=150 && buttonEnabled){

        switch(direcao) {
        case 0: EEPROM.write(70, NONE); break;
        case 1: EEPROM.write(70, BAIXO); break;
        case 2: EEPROM.write(70, CIMA); break;

        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }
      if(p.y>=300 && p.y<=330 && p.x>=90 && p.x<=150 && buttonEnabled){
        switch(direcao) {
        case 0: EEPROM.write(71, NONE); break;
        case 1: EEPROM.write(71, BAIXO); break;
        case 2: EEPROM.write(71, CIMA); break;
        }
        direcao++;
        if(direcao>2) direcao=0;
        refresh=1;
      }

      break;



    case RITMOS_24:
      //Ver Ritmo 1:
      if(p.y>=170 && p.y<=230 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = VER_RITMO1_24;
      }

      //Config Ritmo 1:
      if(p.y>=240 && p.y<=270 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = CONF_RITMO1_24;
      }

      //Play Ritmo 1:
      if(p.y>=280 && p.y<=310 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = PLAY_RITMO1_24;
      }

      //Ver Ritmo 2:
      if(p.y>=170 && p.y<=230 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = VER_RITMO2_24;
      }

      //Config Ritmo 2:
      if(p.y>=240 && p.y<=270 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = CONF_RITMO2_24;
      }

      //Play Ritmo 2:
      if(p.y>=280 && p.y<=310 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = PLAY_RITMO2_24;
      }

      //Ver Ritmo 3:
      if(p.y>=170 && p.y<=230 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = VER_RITMO3_24;
      }

      //Config Ritmo 3:
      if(p.y>=240 && p.y<=270 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = CONF_RITMO3_24;
      }

      //Play Ritmo 3:
      if(p.y>=280 && p.y<=310 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = PLAY_RITMO3_24;
      }

      //Ver Ritmo 4:
      if(p.y>=170 && p.y<=230 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = VER_RITMO4_24;
      }

      //Config Ritmo 4:
      if(p.y>=240 && p.y<=270 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = CONF_RITMO4_24;
      }

      //Play Ritmo 4:
      if(p.y>=280 && p.y<=310 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = PLAY_RITMO4_24;
      }

      break;


    case RITMOS_34:
      //Ver Ritmo 1:
      if(p.y>=170 && p.y<=230 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = VER_RITMO1_34;
      }

      //Config Ritmo 1:
      if(p.y>=240 && p.y<=270 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = CONF_RITMO1_34;
      }

      //Play Ritmo 1:
      if(p.y>=280 && p.y<=310 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = PLAY_RITMO1_34;
      }

      //Ver Ritmo 2:
      if(p.y>=170 && p.y<=230 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = VER_RITMO2_34;
      }

      //Config Ritmo 2:
      if(p.y>=240 && p.y<=270 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = CONF_RITMO2_34;
      }

      //Play Ritmo 2:
      if(p.y>=280 && p.y<=310 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = PLAY_RITMO2_34;
      }

      //Ver Ritmo 3:
      if(p.y>=170 && p.y<=230 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = VER_RITMO3_34;
      }

      //Config Ritmo 3:
      if(p.y>=240 && p.y<=270 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = CONF_RITMO3_34;
      }

      //Play Ritmo 3:
      if(p.y>=280 && p.y<=310 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = PLAY_RITMO3_34;
      }

      //Ver Ritmo 4:
      if(p.y>=170 && p.y<=230 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = VER_RITMO4_34;
      }

      //Config Ritmo 4:
      if(p.y>=240 && p.y<=270 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = CONF_RITMO4_34;
      }

      //Play Ritmo 4:
      if(p.y>=280 && p.y<=310 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = PLAY_RITMO4_34;
      }

      break;


    case RITMOS_44:
      //Ver Ritmo 1:
      if(p.y>=170 && p.y<=230 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = VER_RITMO1_44;
      }

      //Config Ritmo 1:
      if(p.y>=240 && p.y<=270 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = CONF_RITMO1_44;
      }

      //Play Ritmo 1:
      if(p.y>=280 && p.y<=310 && p.x>=60 && p.x<=90 && buttonEnabled){
        tela = PLAY_RITMO1_44;
      }

      //Ver Ritmo 2:
      if(p.y>=170 && p.y<=230 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = VER_RITMO2_44;
      }

      //Config Ritmo 2:
      if(p.y>=240 && p.y<=270 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = CONF_RITMO2_44;
      }

      //Play Ritmo 2:
      if(p.y>=280 && p.y<=310 && p.x>=110 && p.x<=140 && buttonEnabled){
        tela = PLAY_RITMO2_44;
      }

      //Ver Ritmo 3:
      if(p.y>=170 && p.y<=230 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = VER_RITMO3_44;
      }

      //Config Ritmo 3:
      if(p.y>=240 && p.y<=270 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = CONF_RITMO3_44;
      }

      //Play Ritmo 3:
      if(p.y>=280 && p.y<=310 && p.x>=160 && p.x<=190 && buttonEnabled){
        tela = PLAY_RITMO3_44;
      }

      //Ver Ritmo 4:
      if(p.y>=170 && p.y<=230 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = VER_RITMO4_44;
      }

      //Config Ritmo 4:
      if(p.y>=240 && p.y<=270 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = CONF_RITMO4_44;
      }

      //Play Ritmo 4:
      if(p.y>=280 && p.y<=310 && p.x>=210 && p.x<=240 && buttonEnabled){
        tela = PLAY_RITMO4_44;
      }

      break;

    case PROGRAMAR:
      //2/4
      if(p.y>=110 && p.y<=245 && p.x>=50 && p.x<=100 && buttonEnabled){
        tela = RITMOS_24;
      }

      //3/4
      else if(p.y>=110 && p.y<=245 && p.x>=120 && p.x<=170 && buttonEnabled){
        tela = RITMOS_34;
      }

      //4/4
      else if(p.y>=110 && p.y<=245 && p.x>=190 && p.x<=240 && buttonEnabled){
        tela = RITMOS_44;
      }
      break;
      //tela do pedal
    case PEDAL:
      if(p.y>=25 && p.y<=160 && p.x>=80 && p.x<=130 && buttonEnabled){
        //toggle botão de subida
        up++;
        refresh=1;
      }

      if(p.y>=180 && p.y<=315 && p.x>=80 && p.x<=130 && buttonEnabled){
        //toggle botão de descida
        down++;
        refresh=1;
      }

      if(p.y>=25 && p.y<=65 && p.x>=180 && p.x<=200 && buttonEnabled){
        //toggle botão da corda 1
        Pcorda1++;
        refresh=1;
      }

      if(p.y>=75 && p.y<=115 && p.x>=180 && p.x<=200 && buttonEnabled){
        //toggle botão da corda 1
        Pcorda2++;
        refresh=1;
      }

      if(p.y>=125 && p.y<=165 && p.x>=180 && p.x<=200 && buttonEnabled){
        //toggle botão da corda 1
        Pcorda3++;
        refresh=1;
      }

      if(p.y>=175 && p.y<=215 && p.x>=180 && p.x<=200 && buttonEnabled){
        //toggle botão da corda 1
        Pcorda4++;
        refresh=1;
      }

      if(p.y>=225 && p.y<=265 && p.x>=180 && p.x<=200 && buttonEnabled){
        //toggle botão da corda 1
        Pcorda5++;
        refresh=1;
      }

      if(p.y>=275 && p.y<=315 && p.x>=180 && p.x<=200 && buttonEnabled){
        //toggle botão da corda 1
        Pcorda6++;
        refresh=1;
      }
      break;

      //tela dos acordes
    case ACORDE_A7:
      //Pagina B7
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_B7;

      break;

    case ACORDE_B7:
      //Pagina B
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_B;

      //Pagina A7
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_A7;

      break;

    case ACORDE_B:
      //Pagina A
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_A;

      //Pagina B7
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_B7;

      break;

    case ACORDE_A:
      //Pagina G
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_G;

      //Pagina B
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_B;

      break;

    case ACORDE_G:
      //Pagina F
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_F;

      //Pagina A
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_A;

      break;

    case ACORDE_F:
      //Pagina E
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_E;

      //Pagina G
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_G;

      break;

    case ACORDE_E:
      //Pagina D
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_D;

      //Pagina F
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_F;

      break;

    case ACORDE_D:
      //Pagina C
      if(p.y>=0 && p.y<=40 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_C;

      //Pagina E
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_E;
      break;

    case ACORDE_C:
      //Pagina D
      if(p.y>=290 && p.y<=320 && p.x>=90 && p.x<=130 && buttonEnabled) tela = ACORDE_D;
      break;

    case DICIONARIO:
      //Acordes
      if(p.y>=25 && p.y<=160 && p.x>=105 && p.x<=150 && buttonEnabled) tela = ACORDE_C;

      //Ritmos
      if(p.y>=180 && p.y<=315 && p.x>=105 && p.x<=150 && buttonEnabled) tela = RITMO_MARCHA;

      break;

      //tela dos ritmos
    case RITMO_MARCHA:

      //BAIAO
      if(p.y>=290 && p.y<=320 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_BAIAO;

      break;


    case RITMO_BAIAO:
      //MARCHA
      if(p.y>=0 && p.y<=40 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_MARCHA;

      //VALSA
      if(p.y>=290 && p.y<=320 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_VALSA;

      break;


    case RITMO_VALSA:
      //BAIAO
      if(p.y>=0 && p.y<=40 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_BAIAO;

      //GUARANIA
      if(p.y>=290 && p.y<=320 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_GUARANIA;

      break;


    case RITMO_GUARANIA:
      //VALSA
      if(p.y>=0 && p.y<=40 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_VALSA;

      //CANCAO
      if(p.y>=290 && p.y<=320 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_CANCAO;

      break;


    case RITMO_CANCAO:
      //GUARANIA
      if(p.y>=0 && p.y<=40 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_GUARANIA;

      //POP
      if(p.y>=290 && p.y<=320 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_POP;

      break;


    case RITMO_POP:
      //CANCAO
      if(p.y>=0 && p.y<=40 && p.x>=210 && p.x<=240 && buttonEnabled) tela = RITMO_CANCAO;

      break;

    case AFINAR:
      //corda 1
      if(p.y>=0 && p.y<=320 && p.x>=50 && p.x<=60 && buttonEnabled) {
        corda=1;
        refresh=1;
      }

      //corda 2
      else if(p.y>=0 && p.y<=320 && p.x>=85 && p.x<=95 && buttonEnabled) {
        corda=2;
        refresh=1;
      }

      //corda 3
      else if(p.y>=0 && p.y<=320 && p.x>=120 && p.x<=130 && buttonEnabled) {
        corda=3;
        refresh=1;
      }

      //corda 4
      else if(p.y>=0 && p.y<=320 && p.x>=155 && p.x<=165 && buttonEnabled) {
        corda=4;
        refresh=1;
      }

      //corda 5
      else if(p.y>=0 && p.y<=320 && p.x>=190 && p.x<=200 && buttonEnabled) {
        corda=5;
        refresh=1;
      }

      //corda 6
      else if(p.y>=0 && p.y<=320 && p.x>=210 && p.x<=230 && buttonEnabled) {
        corda=6;
        refresh=1;
      }
      break;

      //tela inicial
    case INICIAL:
      //Selecionar exercício
      if(p.y>=25 && p.y<=150 && p.x>=50 && p.x<=100 && buttonEnabled) tela = SELECIONAR;

      //Pedal
      else if(p.y>=180 && p.y<=315 && p.x>=50 && p.x<=100 && buttonEnabled) tela = PEDAL;

      //Programar Ritmos
      else if(p.y>=25 && p.y<=150 && p.x>=120 && p.x<=170 && buttonEnabled) tela = PROGRAMAR;

      //Afinar Violao
      else if(p.y>=180 && p.y<=315 && p.x>=120 && p.x<=170 && buttonEnabled) tela = AFINAR;

      //Dicionário de acordes
      else if(p.y>=15 && p.y<=315 && p.x>=190 && p.x<=240 && buttonEnabled) tela = DICIONARIO;
      break;

      //tela do logo
    case LOGO:
      if(p.y>0 && p.y<320 && p.x>0 && p.x<240) tela=INICIAL;
      break;

    }

  }

  else buttonPress=0;

  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);

}


//desenhar botão de voltar
void backButton() {
  tft.fillRect(0,0, 30, 30, BLACK);
  tft.setCursor(8, 8);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}

//desenhar botão de home
void homeButton() {
  tft.fillRect(31,0, 30, 30, RED);
  tft.drawRect(31,0, 30, 30, BLACK);
  tft.fillTriangle(34,15, 56,15, 45,4, WHITE);
  tft.fillRect(50,5, 3, 9, WHITE);
  tft.fillRect(37,15, 17, 10, WHITE);
  tft.fillRect(42,18, 7, 8, RED);
}

//desenhar botão de help
void helpButton() {
  tft.fillRect(290,0, 30, 30, BLUE);
  tft.drawRect(290, 0, 30, 30, BLACK);
  tft.setCursor(300, 8);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("?");
}

//desenhar quadro de ajustes do metronomo
void metronomoRegulate() {

  tft.fillRect(119, 0, 35, 32, WHITE);

  tft.setTextSize(2);

  tft.fillRect(85,0, 30, 30, CYAN);
  tft.drawRect(85,0, 30, 30, BLACK);
  tft.setCursor(95, 8);
  tft.setTextColor(WHITE);
  tft.print("-");

  tft.fillRect(200,0, 30, 30, CYAN);
  tft.drawRect(200,0, 30, 30, BLACK);
  tft.setCursor(210, 8);
  tft.print("+");

  tft.setTextColor(BLACK);
  tft.setCursor(120, 8);
  tft.print(BPM);
  tft.setCursor(160, 8);
  tft.print("BPM");

  tft.fillRect(240,0, 30, 30, beep);
  tft.drawRect(240,0, 30, 30, BLACK);
  tft.fillTriangle(250,15, 260,5, 260,25, WHITE);
  tft.fillRect(248,12, 6, 7, WHITE);
}

//desenhar quadro de ajuste de BPM
void bpmRegulate(void) {
  tft.fillRect(119, 208, 35, 32, WHITE);

  tft.setTextSize(2);

  tft.fillRect(85,210, 30, 30, CYAN);
  tft.drawRect(85,210, 30, 30, BLACK);
  tft.setCursor(95, 218);
  tft.setTextColor(WHITE);
  tft.print("-");

  tft.fillRect(200,210, 30, 30, CYAN);
  tft.drawRect(200,210, 30, 30, BLACK);
  tft.setCursor(210, 218);
  tft.print("+");

  tft.setTextColor(BLACK);
  tft.setCursor(120, 218);
  tft.print(BPM);
  tft.setCursor(160, 218);
  tft.print("BPM");
}

//desenhar grade de acordes
void gradeAcordes(int x, int y) {
  tft.fillRect(x,y, 106, 2, BLACK);
  tft.fillRect(x,y+20, 106, 2, BLACK);
  tft.fillRect(x,y+40, 106, 2, BLACK);
  tft.fillRect(x,y+60, 106, 2, BLACK);
  tft.fillRect(x,y+80, 106, 2, BLACK);
  tft.fillRect(x,y+100, 106, 2, BLACK);
  tft.fillRect(x,y+120, 106, 2, BLACK);

  tft.fillRect(x,y, 2, 120, BLACK);
  tft.fillRect(x+21,y, 2, 120, BLACK);
  tft.fillRect(x+42,y, 2, 120, BLACK);
  tft.fillRect(x+63,y, 2, 120, BLACK);
  tft.fillRect(x+84,y, 2, 120, BLACK);
  tft.fillRect(x+105,y, 2, 120, BLACK);
}

//desenhar seta pra baixo
void setaBaixo(int x, int y) {
  tft.drawRect(x+5,y, 10, 40, BLACK);
  tft.fillTriangle(x,y+40, x+10,y+60, x+20,y+40, RED);
  tft.drawTriangle(x,y+40, x+10,y+60, x+20,y+40, BLACK);
  tft.fillRect(x+6,y+1, 8, 42, RED);
}

//desenhar seta pra baixo maciça
void setaBaixoOn(int x, int y) {
  tft.fillRect(x+5,y, 10, 40, RED);
  tft.fillTriangle(x,y+40, x+10,y+60, x+20,y+40, RED);
}

//desenhar seta pra baixo oca
void setaBaixoOff(int x, int y) {
  tft.drawRect(x+5,y, 10, 40, RED);
  tft.fillTriangle(x,y+40, x+10,y+60, x+20,y+40, WHITE);
  tft.drawTriangle(x,y+40, x+10,y+60, x+20,y+40, RED);
  tft.fillRect(x+6,y+1, 8, 42, WHITE);
}

//desenhar seta pra cima
void setaCima(int x, int y) {
  tft.drawRect(x+5,y+20, 10, 40, BLACK);
  tft.fillTriangle(x,y+20, x+10,y, x+20,y+20, GREEN);
  tft.drawTriangle(x,y+20, x+10,y, x+20,y+20, BLACK);
  tft.fillRect(x+6,y+19, 8, 40, GREEN);
}

//desenhar seta pra baixo maciça
void setaCimaOn(int x, int y) {
  tft.fillRect(x+5,y+20, 10, 40, GREEN);
  tft.fillTriangle(x,y+20, x+10,y, x+20,y+20, GREEN);
}

//desenhar seta pra baixo oca
void setaCimaOff(int x, int y) {
  tft.drawRect(x+5,y+20, 10, 40, GREEN);
  tft.fillTriangle(x,y+20, x+10,y, x+20,y+20, WHITE);
  tft.drawTriangle(x,y+20, x+10,y, x+20,y+20, GREEN);
  tft.fillRect(x+6,y+19, 8, 40, WHITE);
}

//desenhar tela de help para tela inicial
void helpInicial(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  PEDAL: ESSA FUNCAO PERMITE TOCAR SIMUL-\n  TANEAMENTE AS CORDAS DO VIOLAO DE ACORDO\n  COM A POSICAO DO PEDAL.\n"
      "  AFINAR: ESSA FUNCAO AUXILIA O USUARIO A AFI-\n  NAR CADA CORDA INDIVIDDUALMENTE.\n"
      "  EXERCICIOS: O USUARIO PODE PRATICAR A TROCA\n  DE ACORDES COM DIFERENTES RITMOS E COM-\n  PASSOS.\n"
      "  PROGRAMAR: O USUARIO PODE CRIAR E PRATICAR\n  COM SEUS PROPRIOS RITMOS.\n"
      "  DICIONARIO: O USUARIO PODE VISUALIZAR AL-\n  GUNS RITMOS E ACORDES."
  );


  tft.setFont(NULL);

}

//desenhar tela de help para tela de selecionar compasso
void helpCompasso(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  SELECIONAR O COMPASSO DESEJADO PARA ORGA-\n  NIZAR OS EXERCICIOS.\n\n"
      "  O QUE E UM COMPASSO? O COMPASSO MUSICAL E\n  UMA DIVISAO DA MUSICA EM INTERVALOS DE \n"
      "  TEMPO IGUAIS, COM O OBJETVO DE ORGANIZAR A\n  ESTRUTURA E FACILITAR A ORIENTACAO PARA O\n  LEITOR."
  );

  tft.setFont(NULL);

}

//desenhar tela de help para tela do exercicio
void helpExercicio(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  PRESSIONE O PEDAL PARA EXECUTAR/PAUSAR O\n  EXERCICIO.\n\n"
      "  O BOTAO DE BPM SERVE PARA CONFIGURAR AS BA-\n  TIDAS POR MINUTO DO EXERCICIO.\n\n"
      "  O ICONE DO AUTO FALANTE HABILITA/DESABILITA\n  O SOM DO METRONOMO.\n\n"
      "  A BOLINHA VERDE MOSTRA EM QUE TEMPO DE\n  QUAL COMPASSO O ANDAMENTO DO EXERCICIO\n  ESTA E OS INSTANTES EM QUE DEVE HAVER A\n  TROCA DE ACORDE."
  );

  tft.setFont(NULL);
}

//desenhar tela de help para tela do pedal
void helpPedal(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  SUBIDA: DESABILITA/HABILITA O TOQUE QUANDO\n  O PEDAL SOBE.\n\n"
      "  DESCIDA: DESABILITA/HABILITA O TOQUE QUANDO\n  O PEDAL DESCE.\n\n"
      "  OS BOTOES COM OS NUMEROS DESABILITAM/HA-\n  BILITAM CADA CORDA INDIVIDUALMENTE.\n"
  );

  tft.setFont(NULL);
}

//desenhar tela de help para tela de programar ritmos
void helpProgramar(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  SELECIONAR O COMPASSO DESEJADO PARA ORGA-\n  NIZAR OS RITMOS PROGRAMADOS.\n\n"
      "  O QUE E UM COMPASSO? O COMPASSO MUSICAL E\n  UMA DIVISAO DA MUSICA EM INTERVALOS DE \n"
      "  TEMPO IGUAIS, COM O OBJETVO DE ORGANIZAR A\n  ESTRUTURA E FACILITAR A ORIENTACAO PARA O\n  LEITOR."
  );

  tft.setFont(NULL);
}

//desenhar tela de help para tela de selecionar ritmo programavel
void helpSelRitmo(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  O BOTAO COM O ICONE DE UMA ENGRENAGEM\n  SERVE PARA CONFIGURAR O RITMO SELECIONADO.\n\n"
      "  O BOTAO COM O ICONE DE PLAY SERVE PARA QUE\n  O SISTEMA TOQUE O RITMO SELECIONADO.\n\n"
      "  O BOTAO COM A PALAVRA 'VER' SERVE PARA QUE\n  O USUARIO VISUALIZE O RITMO SELECIONADO.\n"
  );


  tft.setFont(NULL);
}

//desenhar tela de help para tela de ver ritmo programavel
void helpVer(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  AS SETAS PARA CIMA REPRESENTAM UM TOQUE\n  DE BAIXO PARA CIMA NAS CORDAS DO VIOLAO.\n\n"
      "  AS SETAS PARA BAIXO REPRESENTAM UM TOQUE\n  PARA BAIXO NAS CORDAS DO VIOLAO.\n\n"
      "  AS BARRAS ESCURAS REPRESENTAM UMA PAUSA."
  );

  tft.setFont(NULL);
}

//desenhar tela de help para tela de afinar
void helpAfinar(void) {           //      okokkokkok
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  CADA VEZ QUE O PEDAL E PRESSIONADO, O\n  SISTEMA TOCA A CORDA SELECIONADA NA TELA\n\n"
      "  OBS: A CORDA SELECIONADA FICARA COLORIDA.\n"
  );

  tft.setFont(NULL);
}

//desenhar tela de help para tela de acordes e ritmos
void helpDicionario(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  SELECIONE A OPCAO DE ACORDES PARA VER A\n  LISTA DE ACORDES E COMO SAO MONTADOS NO\n  BRACO DO INSTRUMENTO.\n\n"
      "  SELECIONE A OPCAO DE RITMOS PARA VER A LIS-\n  TA DE RITMOS E COMO SÃO COMPOSTOS.\n"
  );


  tft.setFont(NULL);
}

//desenhar tela de help para tela de acordes
void helpAcordes(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  O ACORDE DA ESQUERDA REPRESENTA O MAIOR,\n  E O DA DIREITA, O MENOR.\n"
      "  AS RETAS VERTICAIS REPRESENTAM AS CORDAS\n  DO VIOLAO, SENDO NUMERADAS DE 1 A 6 DA ES-\n"
      "  QUERDA PARA A DIREITA.\n"
      "  AS RETAS HORIZONTAIS REPRESENTAM OS TRAS-\n  TES DO VIOLAO, DELIMITANDO AS CASAS NO BRA-\n"
      "  CO DO INSTRUMENTO.\n"
      "  AS BOLINHAS ESCURAS REPRESENTAM EM QUAIS\n  CASAS OS DEDOS DEVEM SER POSICIONADOS.\n"
      "  AS RETAS ENTRE OS TRASTES MOSTRAM QUE\n  NAQUELA CASA UMA PESTANA DEVE SER FEITA. "
  );

  tft.setFont(NULL);
}

//desenhar tela de help para tela de ritmos
void helpRitmos(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setFont(&Picopixel);

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(0, 50);
  tft.print("  AS SETAS PARA CIMA REPRESENTAM UM TOQUE\n  DE BAIXO PARA CIMA NAS CORDAS DO VIOLAO.\n\n"
      "  AS SETAS PARA BAIXO REPRESENTAM UM TOQUE\n  PARA BAIXO NAS CORDAS DO VIOLAO.\n\n"
      "  AS BARRAS ESCURAS REPRESENTAM UMA PAUSA."
  );

  tft.setFont(NULL);
}

//desenhar tela inicial
void telaInicial() {

  tft.fillScreen(WHITE);
  helpButton();

  //Selecionar exercício
  tft.fillRect(15,40, 135, 50, DARK_BLUE);
  tft.drawRect(15,40, 135, 50, BLACK);
  tft.setCursor(25,50);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Selecionar\n  Exercicio");

  //Pedal
  tft.fillRect(170,40, 135, 50, DARK_BLUE);
  tft.drawRect(170,40, 135, 50, BLACK);
  tft.setCursor(175,58);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("   Pedal");

  //Programar Ritmos
  tft.fillRect(15,110, 135, 50, DARK_BLUE);
  tft.drawRect(15,110, 135, 50, BLACK);
  tft.setCursor(25,120);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Programar\n  Ritmos");

  //Afinar Violao
  tft.fillRect(170,110, 135, 50, DARK_BLUE);
  tft.drawRect(170,110, 135, 50, BLACK);
  tft.setCursor(180,128);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("  Afinar");

  //Dicionário de acordes
  tft.fillRect(15,180, 290, 50, DARK_BLUE);
  tft.drawRect(15,180,290,50,BLACK);
  tft.setCursor(65,198);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Acordes e Ritmos");

}

//desenhar tela de selecionar ritmo prog
void selecionarRitmo() {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(120, 10);
  tft.print("Compassos");


  tft.setTextSize(3);

  tft.setCursor(20,55);
  tft.print("2/4");
  tft.fillRect(90, 50, 105, 30, DARK_BLUE);
  tft.drawRect(90, 50, 105, 30, BLACK);
  tft.fillRect(210, 50, 105, 30, DARK_BLUE);
  tft.drawRect(210, 50, 105, 30, BLACK);


  tft.setCursor(20,105);
  tft.print("3/4");
  tft.fillRect(90, 100, 105, 30, DARK_BLUE);
  tft.drawRect(90, 100, 105, 30, BLACK);
  tft.fillRect(210, 100, 105, 30, DARK_BLUE);
  tft.drawRect(210, 100, 105, 30, BLACK);

  tft.setCursor(20,155);
  tft.print("4/4");
  tft.fillRect(90, 150, 105, 30, DARK_BLUE);
  tft.drawRect(90, 150, 105, 30, BLACK);
  tft.fillRect(210, 150, 105, 30, DARK_BLUE);
  tft.drawRect(210, 150, 105, 30, BLACK);


  tft.setTextSize(2);
  tft.setTextColor(WHITE);

  tft.setCursor(98,58);
  tft.print("Marcha");
  tft.setCursor(218,58);
  tft.print("Baiao");

  tft.setCursor(98,108);
  tft.print("Valsa");
  tft.setCursor(218,108);
  tft.print("Guarania");

  tft.setCursor(98,158);
  tft.print("Cancao");
  tft.setCursor(218,158);
  tft.print("Pop");

}

//desenhar tela de selecionar exercicio
void selecionarExercicio() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setCursor(100, 8);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  switch(tela) {
  case SELECIONAR_MARCHA: tft.print("2/4: Marcha"); break;
  case SELECIONAR_BAIAO: tft.print("2/4: Baiao"); break;
  case SELECIONAR_VALSA: tft.print("3/4: Valsa"); break;
  case SELECIONAR_GUARANIA: tft.print("3/4: Guarania"); break;
  case SELECIONAR_CANCAO: tft.print("4/4: Cancao"); break;
  case SELECIONAR_POP: tft.print("4/4: Pop"); break;
  }

  //ex1
  tft.fillRect(15,80, 140, 50, DARK_BLUE);
  tft.drawRect(15,80, 140, 50, BLACK);
  tft.setCursor(20,98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Exercicio 1");

  //ex2
  tft.fillRect(170,80, 140, 50, DARK_BLUE);
  tft.drawRect(170,80, 140, 50, BLACK);
  tft.setCursor(175,98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Exercicio 2");

  //ex3
  tft.fillRect(15,150, 140, 50, DARK_BLUE);
  tft.drawRect(15,150, 140, 50, BLACK);
  tft.setCursor(20,168);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Exercicio 3");

  //ex4
  tft.fillRect(170,150, 140, 50, DARK_BLUE);
  tft.drawRect(170,150, 140, 50, BLACK);
  tft.setCursor(175,168);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("Exercicio 4");
}


//desenhar tela do exercicio
void exercicio1_44() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Primeiro44[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }

    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Primeiro44[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }


  }

  tft.fillRect(157, 45, 2, 80, BLACK);
  tft.fillRect(157, 140, 2, 80, BLACK);

  manda('T');

}


//desenhar tela do exercicio
void exercicio2_44() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Segundo44[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Segundo44[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }
  }
  tft.fillRect(157, 45, 2, 80, BLACK);
  tft.fillRect(157, 140, 2, 80, BLACK);

  manda('T');

}

//desenhar tela do exercicio
void exercicio3_44() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Terceiro44[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Terceiro44[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }

  tft.fillRect(157, 45, 2, 80, BLACK);
  tft.fillRect(157, 140, 2, 80, BLACK);

  manda('T');

}

//desenhar tela do exercicio
void exercicio4_44() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Quarto44[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);

    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Quarto44[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }
  }

  tft.fillRect(157, 45, 2, 80, BLACK);
  tft.fillRect(157, 140, 2, 80, BLACK);

  manda('T');

}

//desenhar atualizações na tela do exercicio
void exercicio44Update() {

  if(bolinha>=0 && bolinha<8) {
    tft.fillCircle(30+35*bolinha, 108, 8, GREEN);
    if(bolinha==0) tft.fillCircle(275, 203, 8, WHITE);
    if(bolinha>0) tft.fillCircle(30+35*(bolinha-1), 108, 8, WHITE);

  }

  else if(bolinha>=8) {
    tft.fillCircle(30+35*(bolinha-8), 203, 8, GREEN);
    if((bolinha-8)==0) tft.fillCircle(275, 108, 8, WHITE);
    if((bolinha-8)>0) tft.fillCircle(30+35*(bolinha-9), 203, 8, WHITE);

  }

  tft.fillCircle(310, 203, 8, WHITE);

}


//desenhar tela do exercicio
void exercicio1_34() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(45, 45, 2, 80, BLACK);
  tft.fillRect(45, 92, 210, 2, BLACK);
  tft.fillRect(255, 45, 2, 80, BLACK);

  tft.fillRect(45, 140, 2, 80, BLACK);
  tft.fillRect(45, 187, 210, 2, BLACK);
  tft.fillRect(255, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<24; a++) {
    switch(Primeiro34[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<6) {
      tft.fillCircle(65+b*35, 80, 3, BLACK);
      tft.setCursor(60+b*35,50);
    }
    else if(b>=6) {
      tft.fillCircle(65+(b-6)*35, 175, 3, BLACK);
      tft.setCursor(60+(b-6)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Primeiro34[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }


  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);

  manda('T');


}

//desenhar tela do exercicio
void exercicio2_34() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(45, 45, 2, 80, BLACK);
  tft.fillRect(45, 92, 210, 2, BLACK);
  tft.fillRect(255, 45, 2, 80, BLACK);

  tft.fillRect(45, 140, 2, 80, BLACK);
  tft.fillRect(45, 187, 210, 2, BLACK);
  tft.fillRect(255, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<24; a++) {
    switch(Segundo34[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<6) {
      tft.fillCircle(65+b*35, 80, 3, BLACK);
      tft.setCursor(60+b*35,50);
    }
    else if(b>=6) {
      tft.fillCircle(65+(b-6)*35, 175, 3, BLACK);
      tft.setCursor(60+(b-6)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Segundo34[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }
  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);

  manda('T');


}

//desenhar tela do exercicio
void exercicio3_34() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(45, 45, 2, 80, BLACK);
  tft.fillRect(45, 92, 210, 2, BLACK);
  tft.fillRect(255, 45, 2, 80, BLACK);

  tft.fillRect(45, 140, 2, 80, BLACK);
  tft.fillRect(45, 187, 210, 2, BLACK);
  tft.fillRect(255, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<24; a++) {
    switch(Terceiro34[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<6) {
      tft.fillCircle(65+b*35, 80, 3, BLACK);
      tft.setCursor(60+b*35,50);
    }
    else if(b>=6) {
      tft.fillCircle(65+(b-6)*35, 175, 3, BLACK);
      tft.setCursor(60+(b-6)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Terceiro34[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }
  }
  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);

  manda('T');


}

//desenhar tela do exercicio
void exercicio4_34() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(45, 45, 2, 80, BLACK);
  tft.fillRect(45, 92, 210, 2, BLACK);
  tft.fillRect(255, 45, 2, 80, BLACK);

  tft.fillRect(45, 140, 2, 80, BLACK);
  tft.fillRect(45, 187, 210, 2, BLACK);
  tft.fillRect(255, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<24; a++) {
    switch(Quarto34[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }

    b=a/2;
    if(b<6) {
      tft.fillCircle(65+b*35, 80, 3, BLACK);
      tft.setCursor(60+b*35,50);
    }
    else if(b>=6) {
      tft.fillCircle(65+(b-6)*35, 175, 3, BLACK);
      tft.setCursor(60+(b-6)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Quarto34[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }
  }

  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);

  manda('T');


}

//desenhar atualização na tela do exercicio
void exercicio34Update() {


  if(bolinha>=0 && bolinha<6) {
    tft.fillCircle(65+35*bolinha, 108, 8, GREEN);
    if(bolinha==0) tft.fillCircle(240, 203, 8, WHITE);
    if(bolinha>0) tft.fillCircle(65+35*(bolinha-1), 108, 8, WHITE);

  }
  else if(bolinha>=6) {
    tft.fillCircle(65+35*(bolinha-6), 203, 8, GREEN);
    if((bolinha-6)==0) tft.fillCircle(240, 108, 8, WHITE);
    if((bolinha-6)>0) tft.fillCircle(65+35*(bolinha-7), 203, 8, WHITE);

  }

  tft.fillCircle(275, 203, 8, WHITE);

}



//desenhar tela do exercicio
void exercicio1_24() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Primeiro24[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }


    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Primeiro24[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }

  tft.fillRect(85, 45, 2, 80, BLACK);
  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(219, 45, 2, 80, BLACK);
  tft.fillRect(85, 140, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);
  tft.fillRect(219, 140, 2, 80, BLACK);

  manda('T');


}

//desenhar tela do exercicio
void exercicio2_24() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Segundo24[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }


    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Segundo24[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }

  tft.fillRect(85, 45, 2, 80, BLACK);
  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(219, 45, 2, 80, BLACK);
  tft.fillRect(85, 140, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);
  tft.fillRect(219, 140, 2, 80, BLACK);

  manda('T');



}

//desenhar tela do exercicio
void exercicio3_24() {


  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Terceiro24[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }


    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Terceiro24[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }

  tft.fillRect(85, 45, 2, 80, BLACK);
  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(219, 45, 2, 80, BLACK);
  tft.fillRect(85, 140, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);
  tft.fillRect(219, 140, 2, 80, BLACK);

  manda('T');



}

//desenhar tela do exercicio
void exercicio4_24() {



  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();
  metronomoRegulate();

  tft.fillRect(15, 45, 2, 80, BLACK);
  tft.fillRect(15, 92, 270, 2, BLACK);
  tft.fillRect(285, 45, 2, 80, BLACK);

  tft.fillRect(15, 140, 2, 80, BLACK);
  tft.fillRect(15, 187, 270, 2, BLACK);
  tft.fillRect(285, 140, 2, 80, BLACK);

  manda('*');

  for(a=0; a<32; a++) {
    switch(Quarto24[a]) {
    case ChordC: manda('A');  break;
    case ChordCm: manda('H'); break;
    case ChordD: manda('B'); break;
    case ChordDm: manda('I'); break;
    case ChordE: manda('C'); break;
    case ChordEm: manda('J'); break;
    case ChordF: manda('D'); break;
    case ChordFm: manda('K'); break;
    case ChordG: manda('E'); break;
    case ChordGm: manda('L'); break;
    case ChordA: manda('F'); break;
    case ChordAm: manda('M'); break;
    case ChordB: manda('G'); break;
    case ChordBm: manda('N'); break;
    case ChordB7: manda('O'); break;
    case ChordA7: manda('P'); break;
    default: manda('n'); break; //none
    }


    b=a/2;
    if(b<8) {
      tft.fillCircle(30+b*35, 80, 3, BLACK);
      tft.setCursor(25+b*35,50);
    }
    else if(b>=8) {
      tft.fillCircle(30+(b-8)*35, 175, 3, BLACK);
      tft.setCursor(25+(b-8)*35,145);
    }


    if(a%2==0) {
      tft.setTextColor(BLACK);
      tft.setTextSize(2);
      switch(Quarto24[a]) {
      case ChordC: tft.print("C"); break;
      case ChordCm: tft.print("Cm"); break;
      case ChordD: tft.print("D"); break;
      case ChordDm: tft.print("Dm"); break;
      case ChordE: tft.print("E"); break;
      case ChordEm: tft.print("Em"); break;
      case ChordF: tft.print("F"); break;
      case ChordFm: tft.print("Fm"); break;
      case ChordG: tft.print("G"); break;
      case ChordGm: tft.print("Gm"); break;
      case ChordA: tft.print("A"); break;
      case ChordAm: tft.print("Am"); break;
      case ChordB: tft.print("B"); break;
      case ChordBm: tft.print("Bm"); break;
      case ChordB7: tft.print("B7"); break;
      case ChordA7: tft.print("A7"); break;
      }
    }

  }

  tft.fillRect(85, 45, 2, 80, BLACK);
  tft.fillRect(152, 45, 2, 80, BLACK);
  tft.fillRect(219, 45, 2, 80, BLACK);
  tft.fillRect(85, 140, 2, 80, BLACK);
  tft.fillRect(152, 140, 2, 80, BLACK);
  tft.fillRect(219, 140, 2, 80, BLACK);

  manda('T');



}

//desenhar atualização na tela do exercicio
void exercicio24Update() {


  if(bolinha>=0 && bolinha<8) {
    tft.fillCircle(30+35*bolinha, 108, 8, GREEN);
    if(bolinha==0) tft.fillCircle(275, 203, 8, WHITE);
    if(bolinha>0) tft.fillCircle(30+35*(bolinha-1), 108, 8, WHITE);

  }

  else if(bolinha>=8) {
    tft.fillCircle(30+35*(bolinha-8), 203, 8, GREEN);
    if((bolinha-8)==0) tft.fillCircle(275, 108, 8, WHITE);
    if((bolinha-8)>0) tft.fillCircle(30+35*(bolinha-9), 203, 8, WHITE);

  }

  tft.fillCircle(310, 203, 8, WHITE);

}



//desenhar tela do pedal
void pedal(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextColor(WHITE);
  tft.setTextSize(2);

  tft.fillRect(15,70, 135, 50, GREEN);
  tft.drawRect(15,70, 135, 50, BLACK);
  tft.setCursor(40,88);
  tft.print("Subida");

  tft.fillRect(170,70, 135, 50, GREEN);
  tft.drawRect(170,70, 135, 50, BLACK);
  tft.setCursor(195,88);
  tft.print("Descida");

  tft.setTextColor(BLACK);
  tft.setCursor(115,140);
  tft.print("Cordas:");

  tft.setTextColor(WHITE);

  tft.fillRect(15,170, 40, 40, GREEN);
  tft.drawRect(15,170, 40, 40, BLACK);
  tft.setCursor(28,188);
  tft.print("1");

  tft.fillRect(65,170, 40, 40, GREEN);
  tft.drawRect(65,170, 40, 40, BLACK);
  tft.setCursor(78,188);
  tft.print("2");

  tft.fillRect(115,170, 40, 40, GREEN);
  tft.drawRect(115,170, 40, 40, BLACK);
  tft.setCursor(128,188);
  tft.print("3");

  tft.fillRect(165,170, 40, 40, GREEN);
  tft.drawRect(165,170, 40, 40, BLACK);
  tft.setCursor(178,188);
  tft.print("4");

  tft.fillRect(215,170, 40, 40, GREEN);
  tft.drawRect(215,170, 40, 40, BLACK);
  tft.setCursor(228,188);
  tft.print("5");

  tft.fillRect(265,170, 40, 40, GREEN);
  tft.drawRect(265,170, 40, 40, BLACK);
  tft.setCursor(278,188);
  tft.print("6");
}

//desenhar atualização na tela do pedal
void pedalUpdate() {

  up%2==0? subida=GREEN : subida=RED;
  down%2==0? descida=GREEN : descida=RED;

  Pcorda1%2==0? corda1=GREEN : corda1=RED;
  Pcorda2%2==0? corda2=GREEN : corda2=RED;
  Pcorda3%2==0? corda3=GREEN : corda3=RED;
  Pcorda4%2==0? corda4=GREEN : corda4=RED;
  Pcorda5%2==0? corda5=GREEN : corda5=RED;
  Pcorda6%2==0? corda6=GREEN : corda6=RED;


  if(upAnt!=up) {
    if(up%2==0) manda('S');
    else if(up%2!=0) manda('s');
  }

  if(downAnt!=down) {
    if(down%2==0) manda('D');
    else if(down%2!=0) manda('d');
  }

  if(Pcorda1Ant!=Pcorda1) {
    if(Pcorda1%2==0) {manda('@'); intToCharManda(0);}
    else if(Pcorda1%2!=0) {manda('!'); intToCharManda(0);}
  }

  if(Pcorda2Ant!=Pcorda2) {
    if(Pcorda2%2==0) {manda('@'); intToCharManda(1);}
    else if(Pcorda2%2!=0) {manda('!'); intToCharManda(1);}
  }

  if(Pcorda3Ant!=Pcorda3) {
    if(Pcorda3%2==0) {manda('@'); intToCharManda(2);}
    else if(Pcorda3%2!=0) {manda('!'); intToCharManda(2);}
  }

  if(Pcorda4Ant!=Pcorda4) {
    if(Pcorda4%2==0) {manda('@'); intToCharManda(3);}
    else if(Pcorda4%2!=0) {manda('!'); intToCharManda(3);}
  }

  if(Pcorda5Ant!=Pcorda5) {
    if(Pcorda5%2==0) {manda('@'); intToCharManda(4);}
    else if(Pcorda5%2!=0) {manda('!'); intToCharManda(4);}
  }

  if(Pcorda6Ant!=Pcorda6) {
    if(Pcorda6%2==0) {manda('@'); intToCharManda(5);}
    else if(Pcorda6%2!=0) {manda('!'); intToCharManda(5);}
  }



  tft.setTextColor(WHITE);
  tft.setTextSize(2);

  tft.fillRect(15,70, 135, 50, subida);
  tft.drawRect(15,70, 135, 50, BLACK);
  tft.setCursor(40,88);
  tft.print("Subida");

  tft.fillRect(170,70, 135, 50, descida);
  tft.drawRect(170,70, 135, 50, BLACK);
  tft.setCursor(195,88);
  tft.print("Descida");


  tft.fillRect(15,170, 40, 40, corda1);
  tft.drawRect(15,170, 40, 40, BLACK);
  tft.setCursor(28,188);
  tft.print("1");

  tft.fillRect(65,170, 40, 40, corda2);
  tft.drawRect(65,170, 40, 40, BLACK);
  tft.setCursor(78,188);
  tft.print("2");

  tft.fillRect(115,170, 40, 40, corda3);
  tft.drawRect(115,170, 40, 40, BLACK);
  tft.setCursor(128,188);
  tft.print("3");

  tft.fillRect(165,170, 40, 40, corda4);
  tft.drawRect(165,170, 40, 40, BLACK);
  tft.setCursor(178,188);
  tft.print("4");

  tft.fillRect(215,170, 40, 40, corda5);
  tft.drawRect(215,170, 40, 40, BLACK);
  tft.setCursor(228,188);
  tft.print("5");

  tft.fillRect(265,170, 40, 40, corda6);
  tft.drawRect(265,170, 40, 40, BLACK);
  tft.setCursor(278,188);
  tft.print("6");

}

//desenhar tela do programar ritmos
void programarRitmos(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(80, 10);
  tft.print("Selec. Compasso");

  tft.setTextSize(2);
  tft.setTextColor(WHITE);

  //2/4
  tft.fillRect(100,40, 135, 50, DARK_BLUE);
  tft.drawRect(100,40, 135, 50, BLACK);
  tft.setCursor(150,58);
  tft.print("2/4");

  //3/4
  tft.fillRect(100,110, 135, 50, DARK_BLUE);
  tft.drawRect(100,110, 135, 50, BLACK);
  tft.setCursor(150,128);
  tft.print("3/4");

  //4/4
  tft.fillRect(100,180, 135, 50, DARK_BLUE);
  tft.drawRect(100,180,135, 50, BLACK);
  tft.setCursor(150,198);
  tft.print("4/4");

}


//desenhar tela de selecionar ritmos
void selRitmo24() {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(150, 10);
  tft.print("2/4");


  tft.setTextSize(3);

  tft.setCursor(20,55);
  tft.print("Ritmo 1");
  tft.fillRect(160, 50, 60, 30, ORANGE);
  tft.drawRect(160, 50, 60, 30, BLACK);
  tft.fillRect(230, 50, 30, 30, DARK_BLUE);
  tft.drawRect(230, 50, 30, 30, BLACK);
  tft.fillRect(270, 50, 30, 30, DARK_GREEN);
  tft.drawRect(270, 50, 30, 30, BLACK);


  tft.setCursor(20,105);
  tft.print("Ritmo 2");
  tft.fillRect(160, 100, 60, 30, ORANGE);
  tft.drawRect(160, 100, 60, 30, BLACK);
  tft.fillRect(230, 100, 30, 30, DARK_BLUE);
  tft.drawRect(230, 100, 30, 30, BLACK);
  tft.fillRect(270, 100, 30, 30, DARK_GREEN);
  tft.drawRect(270, 100, 30, 30, BLACK);

  tft.setCursor(20,155);
  tft.print("Ritmo 3");
  tft.fillRect(160, 150, 60, 30, ORANGE);
  tft.drawRect(160, 150, 60, 30, BLACK);
  tft.fillRect(230, 150, 30, 30, DARK_BLUE);
  tft.drawRect(230, 150, 30, 30, BLACK);
  tft.fillRect(270, 150, 30, 30, DARK_GREEN);
  tft.drawRect(270, 150, 30, 30, BLACK);

  tft.setCursor(20,205);
  tft.print("Ritmo 4");
  tft.fillRect(160, 200, 60, 30, ORANGE);
  tft.drawRect(160, 200, 60, 30, BLACK);
  tft.fillRect(230, 200, 30, 30, DARK_BLUE);
  tft.drawRect(230, 200, 30, 30, BLACK);
  tft.fillRect(270, 200, 30, 30, DARK_GREEN);
  tft.drawRect(270, 200, 30, 30, BLACK);

  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setCursor(168,58);
  tft.print("Ver");

  tft.setCursor(168,108);
  tft.print("Ver");

  tft.setCursor(168,158);
  tft.print("Ver");

  tft.setCursor(168,208);
  tft.print("Ver");


  drawBitmap(232, 52, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 102, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 152, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 202, engrenagem, 25, 25, WHITE);

  tft.fillTriangle(275,55, 295,65, 275,75, WHITE);
  tft.fillTriangle(275,105, 295,115, 275,125, WHITE);
  tft.fillTriangle(275,155, 295,165, 275,175, WHITE);
  tft.fillTriangle(275,205, 295,215, 275,225, WHITE);
}


//desenhar tela de selecionar ritmos
void selRitmo34() {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(150, 10);
  tft.print("3/4");


  tft.setTextSize(3);

  tft.setCursor(20,55);
  tft.print("Ritmo 1");
  tft.fillRect(160, 50, 60, 30, ORANGE);
  tft.drawRect(160, 50, 60, 30, BLACK);
  tft.fillRect(230, 50, 30, 30, DARK_BLUE);
  tft.drawRect(230, 50, 30, 30, BLACK);
  tft.fillRect(270, 50, 30, 30, DARK_GREEN);
  tft.drawRect(270, 50, 30, 30, BLACK);


  tft.setCursor(20,105);
  tft.print("Ritmo 2");
  tft.fillRect(160, 100, 60, 30, ORANGE);
  tft.drawRect(160, 100, 60, 30, BLACK);
  tft.fillRect(230, 100, 30, 30, DARK_BLUE);
  tft.drawRect(230, 100, 30, 30, BLACK);
  tft.fillRect(270, 100, 30, 30, DARK_GREEN);
  tft.drawRect(270, 100, 30, 30, BLACK);

  tft.setCursor(20,155);
  tft.print("Ritmo 3");
  tft.fillRect(160, 150, 60, 30, ORANGE);
  tft.drawRect(160, 150, 60, 30, BLACK);
  tft.fillRect(230, 150, 30, 30, DARK_BLUE);
  tft.drawRect(230, 150, 30, 30, BLACK);
  tft.fillRect(270, 150, 30, 30, DARK_GREEN);
  tft.drawRect(270, 150, 30, 30, BLACK);

  tft.setCursor(20,205);
  tft.print("Ritmo 4");
  tft.fillRect(160, 200, 60, 30, ORANGE);
  tft.drawRect(160, 200, 60, 30, BLACK);
  tft.fillRect(230, 200, 30, 30, DARK_BLUE);
  tft.drawRect(230, 200, 30, 30, BLACK);
  tft.fillRect(270, 200, 30, 30, DARK_GREEN);
  tft.drawRect(270, 200, 30, 30, BLACK);

  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setCursor(168,58);
  tft.print("Ver");

  tft.setCursor(168,108);
  tft.print("Ver");

  tft.setCursor(168,158);
  tft.print("Ver");

  tft.setCursor(168,208);
  tft.print("Ver");


  drawBitmap(232, 52, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 102, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 152, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 202, engrenagem, 25, 25, WHITE);

  tft.fillTriangle(275,55, 295,65, 275,75, WHITE);
  tft.fillTriangle(275,105, 295,115, 275,125, WHITE);
  tft.fillTriangle(275,155, 295,165, 275,175, WHITE);
  tft.fillTriangle(275,205, 295,215, 275,225, WHITE);
}


//desenhar tela de selecionar ritmos
void selRitmo44() {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(150, 10);
  tft.print("4/4");

  tft.setTextSize(3);

  tft.setCursor(20,55);
  tft.print("Ritmo 1");
  tft.fillRect(160, 50, 60, 30, ORANGE);
  tft.drawRect(160, 50, 60, 30, BLACK);
  tft.fillRect(230, 50, 30, 30, DARK_BLUE);
  tft.drawRect(230, 50, 30, 30, BLACK);
  tft.fillRect(270, 50, 30, 30, DARK_GREEN);
  tft.drawRect(270, 50, 30, 30, BLACK);


  tft.setCursor(20,105);
  tft.print("Ritmo 2");
  tft.fillRect(160, 100, 60, 30, ORANGE);
  tft.drawRect(160, 100, 60, 30, BLACK);
  tft.fillRect(230, 100, 30, 30, DARK_BLUE);
  tft.drawRect(230, 100, 30, 30, BLACK);
  tft.fillRect(270, 100, 30, 30, DARK_GREEN);
  tft.drawRect(270, 100, 30, 30, BLACK);

  tft.setCursor(20,155);
  tft.print("Ritmo 3");
  tft.fillRect(160, 150, 60, 30, ORANGE);
  tft.drawRect(160, 150, 60, 30, BLACK);
  tft.fillRect(230, 150, 30, 30, DARK_BLUE);
  tft.drawRect(230, 150, 30, 30, BLACK);
  tft.fillRect(270, 150, 30, 30, DARK_GREEN);
  tft.drawRect(270, 150, 30, 30, BLACK);

  tft.setCursor(20,205);
  tft.print("Ritmo 4");
  tft.fillRect(160, 200, 60, 30, ORANGE);
  tft.drawRect(160, 200, 60, 30, BLACK);
  tft.fillRect(230, 200, 30, 30, DARK_BLUE);
  tft.drawRect(230, 200, 30, 30, BLACK);
  tft.fillRect(270, 200, 30, 30, DARK_GREEN);
  tft.drawRect(270, 200, 30, 30, BLACK);

  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setCursor(168,58);
  tft.print("Ver");

  tft.setCursor(168,108);
  tft.print("Ver");

  tft.setCursor(168,158);
  tft.print("Ver");

  tft.setCursor(168,208);
  tft.print("Ver");


  drawBitmap(232, 52, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 102, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 152, engrenagem, 25, 25, WHITE);
  drawBitmap(232, 202, engrenagem, 25, 25, WHITE);

  tft.fillTriangle(275,55, 295,65, 275,75, WHITE);
  tft.fillTriangle(275,105, 295,115, 275,125, WHITE);
  tft.fillTriangle(275,155, 295,165, 275,175, WHITE);
  tft.fillTriangle(275,205, 295,215, 275,225, WHITE);

}


//desenhar atualização na tela de play ritmos
void ritmo24Update(void) {

  bpmRegulate();

  for(ad=0+(4*ritmo); ad<4+(4*ritmo); ad++) {
    switch(EEPROM.read(ad)){
    case CIMA:
      if(setinha==(ad-(0+4*ritmo))) {setaCimaOn(90+(40*(ad-(0+4*ritmo))), 80); manda('C');}
      else if(setinha!=(ad-(0+4*ritmo))) setaCimaOff(90+(40*(ad-(0+4*ritmo))), 80);
      else{}
      break;

    case BAIXO:
      if(setinha==(ad-(0+4*ritmo))) {setaBaixoOn(90+(40*(ad-(0+4*ritmo))), 80); manda('B');}
      else if(setinha!=(ad-(0+4*ritmo))) setaBaixoOff(90+(40*(ad-(0+4*ritmo))), 80);
      else{}
      break;

    case NONE:
      if(setinha==(ad-(0+4*ritmo))) {tft.fillRect(95+(40*(ad-(0+4*ritmo))),80, 10, 60, BLACK); manda('n');}
      else if(setinha!=(ad-(0+4*ritmo))) tft.fillRect(96+(40*(ad-(0+4*ritmo))),81, 8, 58, WHITE);
      else{}
      break;

    default: break;
    }
  }

}

//desenhar atualização na tela de play ritmos
void ritmo34Update(void) {

  bpmRegulate();


  for(ad=16+(6*ritmo); ad<22+(6*ritmo); ad++) {
    switch(EEPROM.read(ad)){
    case CIMA:
      if(setinha==(ad-(16+6*ritmo))) {setaCimaOn(50+(40*(ad-(16+6*ritmo))), 80); manda('C');}
      else if(setinha!=(ad-(16+6*ritmo))) setaCimaOff(50+(40*(ad-(16+6*ritmo))), 80);
      else{}
      break;

    case BAIXO:
      if(setinha==(ad-(16+6*ritmo))) {setaBaixoOn(50+(40*(ad-(16+6*ritmo))), 80); manda('B');}
      else if(setinha!=(ad-(16+6*ritmo))) setaBaixoOff(50+(40*(ad-(16+6*ritmo))), 80);
      else{}
      break;

    case NONE:
      if(setinha==(ad-(16+6*ritmo))) {tft.fillRect(55+(40*(ad-(16+6*ritmo))),80, 10, 60, BLACK); manda('n');}
      else if(setinha!=(ad-(16+6*ritmo))) tft.fillRect(56+(40*(ad-(16+6*ritmo))),81, 8, 58, WHITE);
      else{}
      break;

    default: break;
    }
  }

}

//desenhar atualização na tela de play ritmos
void ritmo44Update(void) {

  bpmRegulate();


  for(ad=40+(8*ritmo); ad<48+(8*ritmo); ad++) {
    switch(EEPROM.read(ad)){
    case CIMA:
      if(setinha==(ad-(40+8*ritmo))) {setaCimaOn(10+(40*(ad-(40+8*ritmo))), 80); manda('C');}
      else if(setinha!=(ad-(40+8*ritmo))) setaCimaOff(10+(40*(ad-(40+8*ritmo))), 80);
      else{}
      break;

    case BAIXO:
      if(setinha==(ad-(40+8*ritmo))) {setaBaixoOn(10+(40*(ad-(40+8*ritmo))), 80); manda('B');}
      else if(setinha!=(ad-(40+8*ritmo))) setaBaixoOff(10+(40*(ad-(40+8*ritmo))), 80);
      else{}
      break;

    case NONE:
      if(setinha==(ad-(40+8*ritmo))) {tft.fillRect(15+(40*(ad-(40+8*ritmo))),80, 10, 60, BLACK); manda('n');}
      else if(setinha!=(ad-(40+8*ritmo))) tft.fillRect(16+(40*(ad-(40+8*ritmo))),81, 8, 58, WHITE);
      else{}
      break;

    default: break;
    }
  }

}

//desenhar tela de ver ritmos
void verRitmo1_24() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 1");

  tft.setTextSize(3);

  for(ad=0; ad<4; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*ad), 80); break;
    case BAIXO: setaBaixo(90+(40*ad), 80); break;
    case NONE: tft.fillRect(95+(40*ad),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }


  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo1_24(void) {


  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=0; ad<4; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-0)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-0)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-0)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo1_24(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 1");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=0; ad<4; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(90+(40*ad), 80); break;
    case BAIXO: setaBaixoOff(90+(40*ad), 80); break;
    case NONE: tft.drawRect(95+(40*ad),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo2_24() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 2");

  tft.setTextSize(3);

  for(ad=4; ad<8; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-4)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-4)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-4)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }


  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo2_24(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=4; ad<8; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-4)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-4)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-4)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo2_24(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 2");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=4; ad<8; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(90+(40*(ad-4)), 80); break;
    case BAIXO: setaBaixoOff(90+(40*(ad-4)), 80); break;
    case NONE: tft.drawRect(95+(40*(ad-4)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo3_24() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 3");

  tft.setTextSize(3);

  for(ad=8; ad<12; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-8)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-8)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-8)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }



  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");


}

//desenhar tela de config ritmos
void configRitmo3_24(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=8; ad<12; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-8)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-8)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-8)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo3_24(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();


  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 3");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=8; ad<12; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(90+(40*(ad-8)), 80); break;
    case BAIXO: setaBaixoOff(90+(40*(ad-8)), 80); break;
    case NONE: tft.drawRect(95+(40*(ad-8)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo4_24() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 4");

  tft.setTextSize(3);

  for(ad=12; ad<16; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-12)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-12)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-12)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }



  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo4_24(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=12; ad<16; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(90+(40*(ad-12)), 80); break;
    case BAIXO: setaBaixo(90+(40*(ad-12)), 80); break;
    case NONE: tft.fillRect(95+(40*(ad-12)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo4_24(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("2/4: Ritmo 4");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=12; ad<16; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(90+(40*(ad-12)), 80); break;
    case BAIXO: setaBaixoOff(90+(40*(ad-12)), 80); break;
    case NONE: tft.drawRect(95+(40*(ad-12)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo1_34() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 1");

  tft.setTextSize(3);

  for(ad=16; ad<22; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-16)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-16)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-16)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }



  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");
}

//desenhar tela de config ritmos
void configRitmo1_34(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=16; ad<22; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-16)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-16)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-16)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo1_34(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 1");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=16; ad<22; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(50+(40*(ad-16)), 80); break;
    case BAIXO: setaBaixoOff(50+(40*(ad-16)), 80); break;
    case NONE: tft.drawRect(55+(40*(ad-16)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo2_34() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 2");

  tft.setTextSize(3);

  for(ad=22; ad<28; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-22)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-22)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-22)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }


  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo2_34(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=22; ad<28; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-22)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-22)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-22)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo2_34(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 2");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=22; ad<28; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(50+(40*(ad-22)), 80); break;
    case BAIXO: setaBaixoOff(50+(40*(ad-22)), 80); break;
    case NONE: tft.drawRect(55+(40*(ad-22)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo3_34() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 3");

  tft.setTextSize(3);

  for(ad=28; ad<34; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-28)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-28)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-28)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }


  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo3_34(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=28; ad<34; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-28)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-28)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-28)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo3_34(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 3");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=28; ad<34; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(50+(40*(ad-28)), 80); break;
    case BAIXO: setaBaixoOff(50+(40*(ad-28)), 80); break;
    case NONE: tft.drawRect(55+(40*(ad-28)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo4_34() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 4");

  tft.setTextSize(3);

  for(ad=34; ad<40; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-34)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-34)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-34)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo4_34(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=34; ad<40; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(50+(40*(ad-34)), 80); break;
    case BAIXO: setaBaixo(50+(40*(ad-34)), 80); break;
    case NONE: tft.fillRect(55+(40*(ad-34)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo4_34(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("3/4: Ritmo 4");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=34; ad<40; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(50+(40*(ad-34)), 80); break;
    case BAIXO: setaBaixoOff(50+(40*(ad-34)), 80); break;
    case NONE: tft.drawRect(55+(40*(ad-34)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo1_44() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 1");

  tft.setTextSize(3);

  for(ad=40; ad<48; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-40)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-40)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-40)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }


  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo1_44(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=40; ad<48; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-40)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-40)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-40)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo1_44(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 1");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=40; ad<48; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(10+(40*(ad-40)), 80); break;
    case BAIXO: setaBaixoOff(10+(40*(ad-40)), 80); break;
    case NONE: tft.drawRect(15+(40*(ad-40)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo2_44() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 2");

  tft.setTextSize(3);

  for(ad=48; ad<56; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-48)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-48)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-48)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }


  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo2_44(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=48; ad<56; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-48)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-48)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-48)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }
}

//desenhar tela de play ritmos
void playRitmo2_44(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 2");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=48; ad<56; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(10+(40*(ad-48)), 80); break;
    case BAIXO: setaBaixoOff(10+(40*(ad-48)), 80); break;
    case NONE: tft.drawRect(15+(40*(ad-48)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo3_44() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 3");

  tft.setTextSize(3);

  for(ad=56; ad<64; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-56)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-56)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-56)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }


  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo3_44(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=56; ad<64; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-56)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-56)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-56)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo3_44(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 3");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=56; ad<64; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(10+(40*(ad-56)), 80); break;
    case BAIXO: setaBaixoOff(10+(40*(ad-56)), 80); break;
    case NONE: tft.drawRect(15+(40*(ad-56)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");
}

//desenhar tela de ver ritmos
void verRitmo4_44() {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 4");

  tft.setTextSize(3);

  for(ad=64; ad<72; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-64)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-64)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-64)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }


  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");

}

//desenhar tela de config ritmos
void configRitmo4_44(void) {

  tft.fillRect(280, 0, 40, 40, WHITE);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20, 200);
  tft.print("Toque em uma seta/barra \n  para alterar a direcao");


  tft.fillRect(10,80, 310, 62, WHITE); //limpar as setas

  for(ad=64; ad<72; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCima(10+(40*(ad-64)), 80); break;
    case BAIXO: setaBaixo(10+(40*(ad-64)), 80); break;
    case NONE: tft.fillRect(15+(40*(ad-64)),80, 10, 60, BLACK); break;//sem direção
    default: break;
    }
  }

}

//desenhar tela de play ritmos
void playRitmo4_44(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();

  tft.setTextSize(2);
  tft.setTextColor(BLACK);

  tft.setCursor(100, 10);
  tft.print("4/4: Ritmo 3");

  tft.setCursor(40, 50);
  tft.print("Pedal: executar/pausar");


  tft.setTextSize(3);

  for(ad=64; ad<72; ad++) {
    switch(EEPROM.read(ad)){
    case CIMA: setaCimaOff(10+(40*(ad-64)), 80); break;
    case BAIXO: setaBaixoOff(10+(40*(ad-64)), 80); break;
    case NONE: tft.drawRect(15+(40*(ad-64)),80, 10, 60, BLACK); break; //sem direção
    default: break;
    }
  }

  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");
}

//desenhar tela de afinar
void afinar() {
  tft.fillScreen(ORANGE);
  backButton();
  homeButton();
  helpButton();

  tft.fillCircle(310, 135, 100, BLACK);
  afinarUpdate();
}

//desenhar atualização na tela de afinar
void afinarUpdate() {
  switch(corda) {
  case 0: corda1=WHITE; corda2=WHITE; corda3=WHITE; corda4=WHITE; corda5=WHITE; corda6=WHITE; break;
  case 1: corda1=GREEN; corda2=WHITE; corda3=WHITE; corda4=WHITE; corda5=WHITE; corda6=WHITE; break;
  case 2: corda1=WHITE; corda2=GREEN; corda3=WHITE; corda4=WHITE; corda5=WHITE; corda6=WHITE; break;
  case 3: corda1=WHITE; corda2=WHITE; corda3=GREEN; corda4=WHITE; corda5=WHITE; corda6=WHITE; break;
  case 4: corda1=WHITE; corda2=WHITE; corda3=WHITE; corda4=GREEN; corda5=WHITE; corda6=WHITE; break;
  case 5: corda1=WHITE; corda2=WHITE; corda3=WHITE; corda4=WHITE; corda5=GREEN; corda6=WHITE; break;
  case 6: corda1=WHITE; corda2=WHITE; corda3=WHITE; corda4=WHITE; corda5=WHITE; corda6=GREEN; break;
  }
  tft.fillRect(0, 45, 320, 3, corda1);
  tft.fillRect(0, 80, 320, 3, corda2);
  tft.fillRect(0, 115, 320, 3, corda3);
  tft.fillRect(0, 150, 320, 3, corda4);
  tft.fillRect(0, 185, 320, 3, corda5);
  tft.fillRect(0, 220, 320, 3, corda6);

}

//desenhar tela de acordes e ritmos
void dicionario(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextColor(WHITE);
  tft.setTextSize(2);

  tft.fillRect(15,95, 135, 50, DARK_BLUE);
  tft.drawRect(15,95, 135, 50, BLACK);
  tft.setCursor(40,113);
  tft.print("Acordes");

  tft.fillRect(170,95, 135, 50, DARK_BLUE);
  tft.drawRect(170,95, 135, 50, BLACK);
  tft.setCursor(195,113);
  tft.print("Ritmos");

}

//desenhar tela de acordes C
void acordeC(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("C");

  gradeAcordes(42,54);
  tft.fillCircle(126, 64, 4, BLACK);
  tft.fillCircle(84, 84, 4, BLACK);
  tft.fillCircle(63, 104, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(40, 181);
  tft.print("X");
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);


  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Cm");

  gradeAcordes(170, 54);
  tft.fillRect(168, 103, 112, 3, BLACK); //pestana
  tft.fillCircle(254, 144, 4, BLACK);
  tft.fillCircle(233, 164, 4, BLACK);
  tft.fillCircle(212, 164, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(168, 181);
  tft.print("X");
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);

  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Do Maior   Do Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

}


//desenhar tela de acordes D
void acordeD(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("D");

  gradeAcordes(42,54);
  tft.fillCircle(147, 84, 4, BLACK);
  tft.fillCircle(105, 84, 4, BLACK);
  tft.fillCircle(126, 104, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(40, 181);
  tft.print("X");
  tft.setTextSize(1);
  tft.setCursor(61, 181);
  tft.print("X");
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);


  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Dm");

  gradeAcordes(170, 54);
  tft.fillCircle(275, 64, 4, BLACK);
  tft.fillCircle(233, 104, 4, BLACK);
  tft.fillCircle(254, 124, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(168, 181);
  tft.print("X");
  tft.setTextSize(1);
  tft.setCursor(189, 181);
  tft.print("X");
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Re Maior   Re Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");

}

//desenhar tela de acordes E
void acordeE(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("E");

  gradeAcordes(42,54);
  tft.fillCircle(65, 84, 4, BLACK);
  tft.fillCircle(84, 84, 4, BLACK);
  tft.fillCircle(105, 64, 4, BLACK);

  tft.drawCircle(42, 184, 4, BLACK);
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);


  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Em");

  gradeAcordes(170, 54);
  tft.fillCircle(191, 84, 4, BLACK);
  tft.fillCircle(212, 84, 4, BLACK);

  tft.drawCircle(170, 184, 4, BLACK);
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Mi Maior   Mi Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");

}


//desenhar tela de acordes F
void acordeF(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("F");

  gradeAcordes(42,54);
  tft.fillRect(41, 63, 112, 3, BLACK); //pestana
  tft.fillCircle(105, 84, 4, BLACK);
  tft.fillCircle(84, 104, 4, BLACK);
  tft.fillCircle(63, 104, 4, BLACK);

  tft.drawCircle(42, 184, 4, BLACK);
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);


  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Fm");

  gradeAcordes(170, 54);
  tft.fillRect(168, 63, 112, 3, BLACK); //pestana
  tft.fillCircle(191, 104, 4, BLACK);
  tft.fillCircle(212, 104, 4, BLACK);

  tft.drawCircle(170, 184, 4, BLACK);
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Fa Maior   Fa Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");

}

//desenhar tela de acordes G
void acordeG(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("G");

  gradeAcordes(42,54);
  tft.fillCircle(147, 104, 4, BLACK);
  tft.fillCircle(42, 104, 4, BLACK);
  tft.fillCircle(63, 84, 4, BLACK);

  tft.drawCircle(42, 184, 4, BLACK);
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);


  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Gm");

  gradeAcordes(170, 54);
  tft.fillRect(168, 103, 112, 3, BLACK); //pestana
  tft.fillCircle(191, 144, 4, BLACK);
  tft.fillCircle(212, 144, 4, BLACK);

  tft.drawCircle(170, 184, 4, BLACK);
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Sol Maior   Sol Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");

}

//desenhar tela de acordes A
void acordeA(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("A");

  gradeAcordes(42,54);
  tft.fillCircle(105, 84, 4, BLACK);
  tft.fillCircle(84, 84, 4, BLACK);
  tft.fillCircle(63, 84, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(40, 181);
  tft.print("X");
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);

  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Am");

  gradeAcordes(170, 54);
  tft.fillCircle(254, 64, 4, BLACK);
  tft.fillCircle(233, 84, 4, BLACK);
  tft.fillCircle(212, 84, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(168, 181);
  tft.print("X");
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("La Maior   La Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");

}

//desenhar tela de acordes B
void acordeB(void) {
  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("B");

  gradeAcordes(42,54);
  tft.fillRect(40, 84, 112, 3, BLACK); //pestana
  tft.fillCircle(105, 124, 4, BLACK);
  tft.fillCircle(84, 124, 4, BLACK);
  tft.fillCircle(126, 124, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(40, 181);
  tft.print("X");
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);

  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Bm");

  gradeAcordes(170, 54);
  tft.fillRect(168, 63, 112, 3, BLACK); //pestana
  tft.fillCircle(212, 124, 4, BLACK);
  tft.fillCircle(233, 124, 4, BLACK);
  tft.fillCircle(254, 104, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(168, 181);
  tft.print("X");
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);

  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Si Maior   Si Menor");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");

}

//desenhar tela de acordes B7
void acordeB7(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("B7");

  gradeAcordes(42,54);
  tft.fillCircle(63, 84, 4, BLACK);
  tft.fillCircle(105, 84, 4, BLACK);
  tft.fillCircle(84, 64, 4, BLACK);
  tft.fillCircle(147, 84, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(40, 181);
  tft.print("X");
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);

  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Bm7");

  gradeAcordes(170, 54);
  tft.fillRect(189, 84, 91, 3, BLACK); //pestana
  tft.fillCircle(212, 124, 4, BLACK);
  tft.fillCircle(254, 104, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(168, 181);
  tft.print("X");
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.setCursor(45,200);
  tft.print("Si Maior   Si Menor \n         com Setima");

  tft.fillRect(290,90, 30, 30, CYAN);
  tft.drawRect(290,90, 30, 30, BLACK);
  tft.setCursor(298, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}


//desenhar tela de acordes A7
void acordeA7(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();


  tft.setCursor(90,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("A7");

  gradeAcordes(42,54);
  tft.fillCircle(126, 84, 4, BLACK);
  tft.fillCircle(84, 84, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(40, 181);
  tft.print("X");
  tft.drawCircle(63, 184, 4, BLACK);
  tft.drawCircle(84, 184, 4, BLACK);
  tft.drawCircle(105, 184, 4, BLACK);
  tft.drawCircle(126, 184, 4, BLACK);
  tft.drawCircle(147, 184, 4, BLACK);

  tft.setCursor(212,35);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("Am7");

  gradeAcordes(170, 54);
  tft.fillCircle(254, 64, 4, BLACK);
  tft.fillCircle(212, 84, 4, BLACK);

  tft.setTextSize(1);
  tft.setCursor(168, 181);
  tft.print("X");
  tft.drawCircle(191, 184, 4, BLACK);
  tft.drawCircle(212, 184, 4, BLACK);
  tft.drawCircle(233, 184, 4, BLACK);
  tft.drawCircle(254, 184, 4, BLACK);
  tft.drawCircle(275, 184, 4, BLACK);


  tft.setCursor(45,200);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("La Maior   La Menor \n         com Setima");

  tft.fillRect(0,90, 30, 30, CYAN);
  tft.drawRect(0,90, 30, 30, BLACK);
  tft.setCursor(8, 98);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}


//desenhar tela de ritmo marcha
void ritmoMarcha(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(3);
  tft.setTextColor(BLACK);

  setaBaixo(90, 80);
  tft.fillRect(130,80, 10, 60, BLACK); //sem direção
  setaBaixo(170, 80);
  tft.fillRect(210,80, 10, 60, BLACK); //sem direção



  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");


  tft.setCursor(110, 210);
  tft.print("Marcha");

  tft.fillRect(290,210, 30, 30, CYAN);
  tft.drawRect(290,210, 30, 30, BLACK);
  tft.setCursor(298, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

}

//desenhar tela de ritmo baião
void ritmoBaiao(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(3);
  tft.setTextColor(BLACK);

  setaBaixo(90, 80);
  setaBaixo(130, 80);
  setaBaixo(170, 80);
  setaBaixo(210, 80);

  tft.setCursor(95, 150);
  tft.print("1");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("2");
  tft.setCursor(215, 150);
  tft.print("e");


  tft.setCursor(120, 210);
  tft.print("Baiao");

  tft.fillRect(290,210, 30, 30, CYAN);
  tft.drawRect(290,210, 30, 30, BLACK);
  tft.setCursor(298, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,210, 30, 30, CYAN);
  tft.drawRect(0,210, 30, 30, BLACK);
  tft.setCursor(8, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}

//desenhar tela de ritmo valsa
void ritmoValsa(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(3);
  tft.setTextColor(BLACK);

  setaBaixo(50, 80);
  tft.fillRect(95,80, 10, 60, BLACK); //sem direção
  setaCima(130, 80);
  tft.fillRect(175,80, 10, 60, BLACK); //sem direção
  setaCima(210, 80);
  tft.fillRect(250,80, 10, 60, BLACK); //sem direção


  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");


  tft.setCursor(120, 210);
  tft.print("Valsa");

  tft.fillRect(290,210, 30, 30, CYAN);
  tft.drawRect(290,210, 30, 30, BLACK);
  tft.setCursor(298, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,210, 30, 30, CYAN);
  tft.drawRect(0,210, 30, 30, BLACK);
  tft.setCursor(8, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}

//desenhar tela de ritmo guarânia
void ritmoGuarania(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(3);
  tft.setTextColor(BLACK);

  setaBaixo(50, 80);
  setaCima(90, 80);
  setaBaixo(130, 80);
  setaCima(170, 80);
  setaBaixo(210, 80);
  tft.fillRect(250,80, 10, 60, BLACK); //sem direção


  tft.setCursor(55, 150);
  tft.print("1");
  tft.setCursor(95, 150);
  tft.print("e");
  tft.setCursor(135, 150);
  tft.print("2");
  tft.setCursor(175, 150);
  tft.print("e");
  tft.setCursor(215, 150);
  tft.print("3");
  tft.setCursor(255, 150);
  tft.print("e");


  tft.setCursor(100, 210);
  tft.print("Guarania");

  tft.fillRect(290,210, 30, 30, CYAN);
  tft.drawRect(290,210, 30, 30, BLACK);
  tft.setCursor(298, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,210, 30, 30, CYAN);
  tft.drawRect(0,210, 30, 30, BLACK);
  tft.setCursor(8, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}

//desenhar tela de ritmo canção
void ritmoCancao(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(3);
  tft.setTextColor(BLACK);

  setaBaixo(10, 80);
  tft.fillRect(55,80, 10, 60, BLACK); //sem direção
  setaCima(90, 80);
  tft.fillRect(130,80, 10, 60, BLACK); //sem direção
  setaBaixo(170, 80);
  tft.fillRect(210,80, 10, 60, BLACK); //sem direção
  setaCima(250, 80);
  tft.fillRect(290,80, 10, 60, BLACK); //sem direção

  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");

  tft.setCursor(110, 210);
  tft.print("Cancao");

  tft.fillRect(290,210, 30, 30, CYAN);
  tft.drawRect(290,210, 30, 30, BLACK);
  tft.setCursor(298, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print(">");

  tft.fillRect(0,210, 30, 30, CYAN);
  tft.drawRect(0,210, 30, 30, BLACK);
  tft.setCursor(8, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}

//desenhar tela de ritmo pop
void ritmoPop(void) {

  tft.fillScreen(WHITE);
  backButton();
  homeButton();
  helpButton();

  tft.setTextSize(3);
  tft.setTextColor(BLACK);

  setaBaixo(10, 80);
  setaBaixo(50, 80);
  setaCima(90, 80);
  setaCima(130, 80);
  setaBaixo(170, 80);
  setaBaixo(210, 80);
  setaCima(250, 80);
  tft.fillRect(290,80, 10, 60, BLACK); //sem direção

  tft.setCursor(15, 150);
  tft.print("1");
  tft.setCursor(55, 150);
  tft.print("e");
  tft.setCursor(95, 150);
  tft.print("2");
  tft.setCursor(135, 150);
  tft.print("e");
  tft.setCursor(175, 150);
  tft.print("3");
  tft.setCursor(215, 150);
  tft.print("e");
  tft.setCursor(255, 150);
  tft.print("4");
  tft.setCursor(295, 150);
  tft.print("e");

  tft.setCursor(130, 210);
  tft.print("Pop");

  tft.fillRect(0,210, 30, 30, CYAN);
  tft.drawRect(0,210, 30, 30, BLACK);
  tft.setCursor(8, 218);
  tft.setTextColor(WHITE);
  tft.setTextSize(2);
  tft.print("<");
}


//configuração do valor de BPM
void ConfiguraBPM(int bpm){
  IntervaloBPM = 30000/bpm;
}

//interrupção de timer - a cada 1ms
void timerInterrupt()
{
  if(tela==PEDAL) LeituraEncoder();
  EncoderBotao();

  tempoComunic++; //contagem intervalo entre comunicação

  //comunicação entre dispositivos
  if(tempoComunic>=800) {
    manda('X');
    if(resposta) communication=1;
    else if(!resposta) communication=0;
    resposta=0;
    tempoComunic=0;
  }

  //se o pedal não acusar estado de pausa
  if(!pausa) {

    ContadorTempoBPM++; //contagem intervalo entre cada BPM

    if(ContadorTempoBPM >= IntervaloBPM) {

      //atualização das setas da tela de play ritmos
      if(telaPlay) {setinha++; updateEnable=1;}

      mandaDirecaoEnable=1;

      MetronomoEnable=true; //habilita bipe do metronomo


      if(ContadorTempoBPM>=(IntervaloBPM-(IntervaloBPM*0.9))) { //delay para sincronzação entre buzzer e toque das cordas na tela do exercício

        //verificação e aviso da direção de toque das cordas conforme a tela
        if(telaCancao) {
          switch(CancaoDirecao[i]) {
          case NONE: manda('n'); MetronomoEnable = false; break;
          case CIMA: manda('C'); MetronomoEnable=false; break;
          case BAIXO: manda('B'); MetronomoEnable=false; break;
          }

        }

        else if(telaPop) {

          switch(PopDirecao[i]) {
          case NONE: manda('n'); MetronomoEnable = false; break;
          case CIMA: manda('C'); MetronomoEnable=false; break;
          case BAIXO: manda('B'); MetronomoEnable=false; break;
          }

        }


        else if(telaValsa) {

          switch(ValsaDirecao[i]) {
          case NONE: manda('n'); MetronomoEnable = false; break;
          case CIMA: manda('C'); MetronomoEnable=false; break;
          case BAIXO: manda('B'); MetronomoEnable=false; break;
          }

        }

        else if(telaGuarania) {

          switch(GuaraniaDirecao[i]) {
          case NONE: manda('n'); MetronomoEnable = false; break;
          case CIMA: manda('C'); MetronomoEnable=false; break;
          case BAIXO: manda('B'); MetronomoEnable=false; break;
          }

        }


        else if(telaMarcha) {

          switch(MarchaDirecao[i]) {
          case NONE: manda('n'); MetronomoEnable = false; break;
          case CIMA: manda('C'); MetronomoEnable=false; break;
          case BAIXO: manda('B'); MetronomoEnable=false; break;
          }

        }

        else if(telaBaiao) {

          switch(BaiaoDirecao[i]) {
          case NONE: manda('n'); MetronomoEnable = false; break;
          case CIMA: manda('C'); MetronomoEnable=false; break;
          case BAIXO: manda('B'); MetronomoEnable=false; break;
          }

        }

        else{}

      }

      //atualização da bolinha do exercício
      if(telaExercicio!=0) {
        i++;
        updateEnable=1;

        if(i%2==0) {bolinha++; MetronomoEnable=true;}

        switch(telaExercicio) {
        case 4: if(i>=32) i=0; break;
        case 3: if(i>=24) i=0; break;
        case 2: if(i>=32) i=0; break;
        }
      }
      else i=0;


      ContadorTempoBPM=0;
    }



    if(telaExercicio!=0) {
      //bipe do metronomo
      if(MetronomoEnable) {
        MetronomoEnable = false;
        //seleção de frequência do bipe
        switch(MetronomoCont){
        case 0: if(EnableMetronomoBIPE) tone(PinoBuzzer, 3000);                                                 break;
        case 1: if(EnableMetronomoBIPE) tone(PinoBuzzer, 5000);     if(ModoDeBatida == Modo24) MetronomoReset;  break;
        case 2: if(EnableMetronomoBIPE) tone(PinoBuzzer, 5000);     if(ModoDeBatida == Modo34) MetronomoReset;  break;
        case 3: if(EnableMetronomoBIPE) tone(PinoBuzzer, 5000);     if(ModoDeBatida == Modo44) MetronomoReset;  break;
        }

        MetronomoCont++;

      }
      else if (MetronomoContDesliga++ > 150) {  noTone(PinoBuzzer); MetronomoContDesliga = 0; } //desliga bipe do metronomo

    }

  }
}


//verificação serial
void serialEvent(){                      // Interrupção da serial com o Bluetooth
  if (Serial.available()) {              // verifica se chegou algum dado na serial
    rx_buff = Serial.read();              // Lê o byte mais recente disponível na serial
    switch(rx_buff){
    case '+': if(BPM<=175) BPM+=1; Serial.println(BPM); break;
    case '-': if(BPM>=50 ) BPM-=1; Serial.println(BPM); break;
    case 'X': resposta=1;           //houve resposta do outro lado, conexão estabelecida
    }
  }
}

//envio de caracteres inteiros
void intToCharManda(int x){
  switch(x){
  case 0: manda('0'); break;
  case 1: manda('1'); break;
  case 2: manda('2'); break;
  case 3: manda('3'); break;
  case 4: manda('4'); break;
  case 5: manda('5'); break;
  case 6: manda('6'); break;
  case 7: manda('7'); break;
  case 8: manda('8'); break;
  case 9: manda('9'); break;
  case 10: manda('X'); break;
  case 11: manda('I'); break;
  }
}

//envio de caracteres
void manda(char x){
  Serial.write(x);
  mySerial.write(x);
}

//leitura da posição do encoder
void LeituraEncoder(){
  debounce++; //prevenção de repetições de valor
  encoder.tick();
  int newPos = encoder.getPosition(); //posição do encoder
  if ((pos != newPos) && (debounce%2==0)) { //atualização do encoder
    if(newPos>=3 && newPos<=8) intToCharManda(newPos-3); //manda a corda a ser tocada
    pos = newPos;
    if(debounce>100) debounce=0;
  }
}

//detecção de pressionamento do encoder
int EncoderBotao(){
  debounce++;
  encoder.tick();

  int newPos = encoder.getPosition();
  if ( (newPos<6) && FlagBotaoEncoder) {FlagBotaoEncoder = false; } //encoder não pressionado
  if ((newPos>=6) && (debounce%2==0) && !FlagBotaoEncoder) { //encoder pressionado
    FlagBotaoEncoder = true;
    if(debounce>100) debounce=0;
    //instrução do encoder por tela
    switch(tela) {
    case AFINAR: if(corda>0 && corda<=6) intToCharManda(corda-1); break;
    case ACORDE_C: manda('%'); manda('A'); break;
    case ACORDE_D: manda('%'); manda('B'); break;
    case ACORDE_E: manda('%'); manda('C'); break;
    case ACORDE_F: manda('%'); manda('D'); break;
    case ACORDE_G: manda('%'); manda('E'); break;
    case ACORDE_A: manda('%'); manda('F'); break;
    case ACORDE_B: manda('%'); manda('G'); break;
    case ACORDE_B7: manda('%'); manda('O'); break;
    case ACORDE_A7: manda('%'); manda('P'); break;
    default: break;

    }

    if(telaExercicio || telaPlay) {pausa=!pausa; if(pausa) {manda('P'); noTone(PinoBuzzer);} else if(!pausa) manda('p'); else{}}
    return 1;
  }
  else return 0;

}

//verificação, atualização e controle das telas ciclicamente
void loop() {

  ConfiguraBPM(BPM);

  //flag de verificação de tela
  if(telaPlay) {
    if(refresh) {bpmRegulate(); delay(100); refresh=0;} //atualização do BPM da tela
  }

  //verificação de tela
  switch(telaExercicio) {
  case 4: //exercícios de tipo 4/4
    if(bolinha>15) bolinha=0; //reset da posição da bolinha

    EncoderBotao(); //verificação de pressionamento do encoder


    if(updateEnable) {exercicio44Update(); updateEnable=0;} //atualização na tela do exercício


    if(refresh) {metronomoRegulate(); delay(100); refresh=0;} //atualização da grade de ajuste do metronomo

    check(); //verificação de pressionamento na tela

    //troca de tela
    switch(tela) {
    case VOLTAR: EnableMetronomoBIPE=false; beep=GREEN; noTone(PinoBuzzer); telaCancao==1?tela=SELECIONAR_CANCAO:tela=SELECIONAR_POP; selecionarExercicio();  bolinha=-1; MetronomoReset; pausa=0; BPM=100; telaExercicio=0; i=0; updateEnable=0; telaCancao=0; telaPop=0; break;
    case HOME: EnableMetronomoBIPE=false; beep=GREEN; noTone(PinoBuzzer); telaInicial(); tela=INICIAL; bolinha=-1; MetronomoReset; pausa=0; BPM=100; telaExercicio=0; i=0; updateEnable=0; telaCancao=0; telaPop=0; break;
    case HELP_EXERCICIO: telaExercicio=00; helpExercicio(); break;
    }

    break;

    case 3: //exercícios de tipo 3/4
      if(bolinha>11) bolinha=0;

      EncoderBotao();

      if(updateEnable) {exercicio34Update(); updateEnable=0;}


      if(refresh) {metronomoRegulate(); delay(100); refresh=0; }

      check();

      switch(tela) {
      case VOLTAR: EnableMetronomoBIPE=false; beep=GREEN; noTone(PinoBuzzer); telaValsa==1?tela=SELECIONAR_VALSA:tela=SELECIONAR_GUARANIA; selecionarExercicio();  bolinha=-1; MetronomoReset; pausa=0; BPM=100; telaExercicio=0; i=0; updateEnable=0; telaValsa=0; telaGuarania=0; break;
      case HOME: EnableMetronomoBIPE=false; beep=GREEN; noTone(PinoBuzzer); telaInicial(); tela=INICIAL; bolinha=-1; MetronomoReset; pausa=0; BPM=100; telaExercicio=0; i=0; updateEnable=0; telaValsa=0; telaGuarania=0; break;
      case HELP_EXERCICIO: telaExercicio=0; helpExercicio(); break;
      }

      break;

      case 2: //exercícios de tipo 2/4
        if(bolinha>15) bolinha=0;

        EncoderBotao();

        if(updateEnable) {exercicio24Update(); updateEnable=0;}

        if(refresh) {metronomoRegulate(); delay(100); refresh=0; }

        check();

        switch(tela) {
        case VOLTAR: EnableMetronomoBIPE=false; beep=GREEN; noTone(PinoBuzzer); telaMarcha==1?tela=SELECIONAR_MARCHA:tela=SELECIONAR_BAIAO; selecionarExercicio(); bolinha=-1; MetronomoReset; pausa=0; BPM=100; telaExercicio=0; i=0; updateEnable=0; telaMarcha=0; telaBaiao=0; break;
        case HOME: EnableMetronomoBIPE=false; beep=GREEN; noTone(PinoBuzzer); telaInicial(); tela=INICIAL; bolinha=-1; MetronomoReset; pausa=0; BPM=100; telaExercicio=0; i=0; updateEnable=0; telaMarcha=0; telaBaiao=0; break;
        case HELP_EXERCICIO: telaExercicio=0; helpExercicio(); break;
        }

        break;

        default: break;
  }


  //verificação de tela
  switch(tela) {

  case LOGO:
    //verificação e troca de tela
    check();
    if(tela==INICIAL) telaInicial();
    break;

  case INICIAL:
    check();

    switch(tela) {
    case SELECIONAR: selecionarRitmo(); manda('E'); break;
    case PEDAL: pedal(); manda('A'); manda('S'); manda('D'); for(u=0; u<6; u++) {manda('@'); intToCharManda(u);} break;
    case PROGRAMAR: programarRitmos(); break;
    case AFINAR: afinar(); manda('a'); break;
    case DICIONARIO: dicionario(); break;
    case HELP_INICIAL: helpInicial(); break;

    }

    break;

  case SELECIONAR:
    check();

    switch(tela) {
    case SELECIONAR_MARCHA: manda('m');  selecionarExercicio(); manda('#'); manda('2'); ModoDeBatida=Modo24; break;
    case SELECIONAR_BAIAO: manda('b');  selecionarExercicio(); manda('#'); manda('2'); ModoDeBatida=Modo24; break;
    case SELECIONAR_VALSA: manda('v');  selecionarExercicio(); manda('#'); manda('1'); ModoDeBatida=Modo34; break;
    case SELECIONAR_GUARANIA: manda('g');  selecionarExercicio(); manda('#'); manda('1'); ModoDeBatida=Modo34; break;
    case SELECIONAR_CANCAO: manda('c');  selecionarExercicio(); manda('#'); manda('0'); ModoDeBatida=Modo44; break;
    case SELECIONAR_POP: manda('l');  selecionarExercicio(); manda('#'); manda('0'); ModoDeBatida=Modo44; break;
    case VOLTAR: telaInicial(); tela=INICIAL; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case HELP_COMPASSO: helpCompasso(); break;
    }
    break;

  case SELECIONAR_MARCHA:
    check();
    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case EX1_24: MetronomoReset; pausa=1; exercicio1_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=12; break;
    case EX2_24: MetronomoReset; pausa=1; exercicio2_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=22; break;
    case EX3_24: MetronomoReset; pausa=1; exercicio3_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=32; break;
    case EX4_24: MetronomoReset; pausa=1; exercicio4_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=42; break;
    }
    break;

  case SELECIONAR_BAIAO:
    check();
    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case EX1_24: MetronomoReset; pausa=1; exercicio1_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=12; break;
    case EX2_24: MetronomoReset; pausa=1; exercicio2_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=22;  break;
    case EX3_24: MetronomoReset; pausa=1; exercicio3_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=32; break;
    case EX4_24: MetronomoReset; pausa=1; exercicio4_24(); exercicio24Update(); EnableMetronomoBIPE=true; exTela=42; break;
    }
    break;

  case SELECIONAR_VALSA:
    check();
    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case EX1_34: MetronomoReset; pausa=1; exercicio1_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=13; break;
    case EX2_34: MetronomoReset; pausa=1; exercicio2_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=23; break;
    case EX3_34: MetronomoReset; pausa=1; exercicio3_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=33; break;
    case EX4_34: MetronomoReset; pausa=1; exercicio4_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=43; break;
    }
    break;

  case SELECIONAR_GUARANIA:
    check();
    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case EX1_34: MetronomoReset; pausa=1; exercicio1_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=13; break;
    case EX2_34: MetronomoReset; pausa=1; exercicio2_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=23; break;
    case EX3_34: MetronomoReset; pausa=1; exercicio3_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=33; break;
    case EX4_34: MetronomoReset; pausa=1; exercicio4_34(); exercicio34Update(); EnableMetronomoBIPE=true; exTela=43; break;
    }
    break;

  case SELECIONAR_CANCAO:
    check();

    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case EX1_44: MetronomoReset; pausa=1; exercicio1_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=14; break;
    case EX2_44: MetronomoReset; pausa=1; exercicio2_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=24; break;
    case EX3_44: MetronomoReset; pausa=1; exercicio3_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=34; break;
    case EX4_44: MetronomoReset; pausa=1; exercicio4_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=44; break;

    }
    break;

  case SELECIONAR_POP:
    check();

    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case EX1_44: MetronomoReset; pausa=1; exercicio1_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=14; break;
    case EX2_44: MetronomoReset; pausa=1; exercicio2_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=24; break;
    case EX3_44: MetronomoReset; pausa=1; exercicio3_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=34; break;
    case EX4_44: MetronomoReset; pausa=1; exercicio4_44(); exercicio44Update(); EnableMetronomoBIPE=true; exTela=44; break;

    }

    break;


  case PEDAL:

    LeituraEncoder();

    if(refresh) {pedalUpdate(); refresh=0; } //atualização na tela do pedal

    PEDALmem   //Armazena o valor antigo das variaveis de toggle do pedal para verificação do envio serial

    check();

    switch(tela) {
    case VOLTAR: telaInicial(); tela=INICIAL; PEDALdef break; //Obs: PEDALdef reseta as variaveis aos seus valores de origem
    case HOME: telaInicial(); tela=INICIAL; PEDALdef break;
    case HELP_PEDAL: helpPedal(); break;
    }

    break;


  case PROGRAMAR:
    check();

    switch(tela) {
    case RITMOS_24: selRitmo24(); selectRitmo=2; break;
    case RITMOS_34: selRitmo34(); selectRitmo=3; break;
    case RITMOS_44: selRitmo44(); selectRitmo=4; break;
    case VOLTAR: telaInicial(); tela=INICIAL; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case HELP_PROGRAMAR: helpProgramar(); break;
    }
    break;

  case RITMOS_24:

    check();

    switch(tela) {
    case VOLTAR: programarRitmos(); tela=PROGRAMAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case VER_RITMO1_24: telaVer=12; verRitmo1_24(); break;
    case CONF_RITMO1_24: telaConfig=1; verRitmo1_24(); configRitmo1_24(); break;
    case PLAY_RITMO1_24: pausa=1; ritmo=0; telaPlay=1; manda('Y'); playRitmo1_24(); ritmo24Update();   break;
    case VER_RITMO2_24: telaVer=22; verRitmo2_24();  break;
    case CONF_RITMO2_24: telaConfig=1; verRitmo2_24(); configRitmo2_24(); break;
    case PLAY_RITMO2_24: pausa=1; ritmo=1; telaPlay=1; manda('Y'); playRitmo2_24(); ritmo24Update();   break;
    case VER_RITMO3_24: telaVer=32; verRitmo3_24(); break;
    case CONF_RITMO3_24: telaConfig=1; verRitmo3_24(); configRitmo3_24();  break;
    case PLAY_RITMO3_24: pausa=1; ritmo=2; telaPlay=1; manda('Y'); playRitmo3_24(); ritmo24Update();   break;
    case VER_RITMO4_24: telaVer=42; verRitmo4_24(); break;
    case CONF_RITMO4_24: telaConfig=1; verRitmo4_24(); configRitmo4_24();  break;
    case PLAY_RITMO4_24: pausa=1; ritmo=3; telaPlay=1; manda('Y'); playRitmo4_24(); ritmo24Update();   break;
    case HELP_SELRITMO: helpSelRitmo(); break;

    }
    break;

  case RITMOS_34:

    check();

    switch(tela) {
    case VOLTAR: programarRitmos(); tela=PROGRAMAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case VER_RITMO1_34: telaVer=13; verRitmo1_34(); break;
    case CONF_RITMO1_34: telaConfig=1; verRitmo1_34(); configRitmo1_34();  break;
    case PLAY_RITMO1_34: pausa=1; ritmo=0; telaPlay=1; manda('Y'); playRitmo1_34(); ritmo34Update();   break;
    case VER_RITMO2_34: telaVer=23; verRitmo2_34(); break;
    case CONF_RITMO2_34: telaConfig=1; verRitmo2_34(); configRitmo2_34();  break;
    case PLAY_RITMO2_34: pausa=1; ritmo=1; telaPlay=1; manda('Y'); playRitmo2_34(); ritmo34Update();   break;
    case VER_RITMO3_34: telaVer=33; verRitmo3_34(); break;
    case CONF_RITMO3_34: telaConfig=1; verRitmo3_34(); configRitmo3_34();  break;
    case PLAY_RITMO3_34: pausa=1; ritmo=2; telaPlay=1; manda('Y'); playRitmo3_34(); ritmo34Update();   break;
    case VER_RITMO4_34: telaVer=43; verRitmo4_34(); break;
    case CONF_RITMO4_34: telaConfig=1; verRitmo4_34(); configRitmo4_34();  break;
    case PLAY_RITMO4_34: pausa=1; ritmo=3; telaPlay=1; manda('Y'); playRitmo4_34(); ritmo34Update();   break;
    case HELP_SELRITMO: helpSelRitmo(); break;

    }
    break;

  case RITMOS_44:

    check();

    switch(tela) {
    case VOLTAR: programarRitmos(); tela=PROGRAMAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case VER_RITMO1_44: telaVer=14; verRitmo1_44(); break;
    case CONF_RITMO1_44: telaConfig=1; verRitmo1_44(); configRitmo1_44();  break;
    case PLAY_RITMO1_44: pausa=1; ritmo=0; telaPlay=1; manda('Y'); playRitmo1_44(); ritmo44Update();   break;
    case VER_RITMO2_44: telaVer=24; verRitmo2_44(); break;
    case CONF_RITMO2_44: telaConfig=1; verRitmo2_44(); configRitmo2_44();  break;
    case PLAY_RITMO2_44: pausa=1; ritmo=1; telaPlay=1; manda('Y'); playRitmo2_44(); ritmo44Update();   break;
    case VER_RITMO3_44: telaVer=34; verRitmo3_44(); break;
    case CONF_RITMO3_44: telaConfig=1; verRitmo3_44(); configRitmo3_44();  break;
    case PLAY_RITMO3_44: pausa=1; ritmo=2; telaPlay=1; manda('Y'); playRitmo3_44(); ritmo44Update();   break;
    case VER_RITMO4_44: telaVer=44; verRitmo4_44(); break;
    case CONF_RITMO4_44: telaConfig=1; verRitmo4_44(); configRitmo4_44();  break;
    case PLAY_RITMO4_44: pausa=1; ritmo=3; telaPlay=1; manda('Y'); playRitmo4_44(); ritmo44Update();   break;
    case HELP_SELRITMO: helpSelRitmo(); break;

    }
    break;

  case VER_RITMO1_24:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO1_24:

    if(refresh) {configRitmo1_24(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO1_24:

    if(setinha>3) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo24Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo24(); tela=RITMOS_24; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;


  case VER_RITMO2_24:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO2_24:

    if(refresh) {configRitmo2_24(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO2_24:

    if(setinha>3) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo24Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo24(); tela=RITMOS_24; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO3_24:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO3_24:

    if(refresh) {configRitmo3_24(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO3_24:

    if(setinha>3) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo24Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo24(); tela=RITMOS_24; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO4_24:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO4_24:

    if(refresh) {configRitmo4_24(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo24(); tela=RITMOS_24; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO4_24:

    if(setinha>3) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo24Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo24(); tela=RITMOS_24; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO1_34:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO1_34:

    if(refresh) {configRitmo1_34(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO1_34:

    if(setinha>5) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo34Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo34(); tela=RITMOS_34; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO2_34:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO2_34:

    if(refresh) {configRitmo2_34(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO2_34:

    if(setinha>5) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo34Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo34(); tela=RITMOS_34; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO3_34:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO3_34:

    if(refresh) {configRitmo3_34(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO3_34:

    if(setinha>5) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo34Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo34(); tela=RITMOS_34; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO4_34:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO4_34:

    if(refresh) {configRitmo4_34(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo34(); tela=RITMOS_34; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO4_34:

    if(setinha>5) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo34Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo34(); tela=RITMOS_34; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO1_44:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO1_44:

    if(refresh) {configRitmo1_44(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO1_44:

    if(setinha>7) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo44Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo44(); tela=RITMOS_44; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO2_44:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO2_44:

    if(refresh) {configRitmo2_44(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO2_44:

    if(setinha>7) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo44Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo44(); tela=RITMOS_44; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO3_44:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO3_44:

    if(refresh) {configRitmo3_44(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO3_44:

    if(setinha>7) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo44Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo44(); tela=RITMOS_44; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case VER_RITMO4_44:

    check();

    switch(tela) {
    case VOLTAR: telaVer=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaVer=0; telaInicial(); tela=INICIAL; break;
    case HELP_VER: helpVer(); break;
    }
    break;

  case CONF_RITMO4_44:

    if(refresh) {configRitmo4_44(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaConfig=0; selRitmo44(); tela=RITMOS_44; break;
    case HOME: telaConfig=0; telaInicial(); tela=INICIAL; break;
    }

    break;

  case PLAY_RITMO4_44:

    if(setinha>7) setinha=0;

    EncoderBotao();


    if(updateEnable) {ritmo44Update(); updateEnable=0;}


    check();

    switch(tela) {
    case VOLTAR: selRitmo44(); tela=RITMOS_44; telaPlay=0; setinha=-1; pausa=1; break;
    case HOME: telaInicial(); tela=INICIAL; telaPlay=0; setinha=-1; pausa=1; break;
    }

    break;

  case AFINAR:

    EncoderBotao();

    if(refresh) {afinarUpdate(); refresh=0;}

    check();

    switch(tela) {
    case VOLTAR: telaInicial(); tela=INICIAL; corda=0; break;
    case HOME: telaInicial(); tela=INICIAL; corda=0; break;
    case HELP_AFINAR: helpAfinar(); break;
    }

    break;

  case DICIONARIO:
    check();
    switch(tela) {
    case VOLTAR: telaInicial(); tela=INICIAL; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_C: manda('%'); acordeC(); acorde=ChordC; break;
    case RITMO_MARCHA: ritmoMarcha(); telaRitmo=1; break;
    case HELP_DICIONARIO: helpDicionario(); break;
    }
    break;

  case ACORDE_C:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_D: acordeD(); acorde=ChordD; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;


  case ACORDE_D:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_C: acordeC(); acorde=ChordC; break;
    case ACORDE_E: acordeE(); acorde=ChordE; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case ACORDE_E:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_D: acordeD(); acorde=ChordD; break;
    case ACORDE_F: acordeF(); acorde=ChordF; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case ACORDE_F:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_E: acordeE(); acorde=ChordE; break;
    case ACORDE_G: acordeG(); acorde=ChordG; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case ACORDE_G:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_F: acordeF(); acorde=ChordF; break;
    case ACORDE_A: acordeA(); acorde=ChordA; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case ACORDE_A:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_G: acordeG(); acorde=ChordG; break;
    case ACORDE_B: acordeB(); acorde=ChordB; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case ACORDE_B:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_A: acordeA(); acorde=ChordA; break;
    case ACORDE_B7: acordeB7(); acorde=ChordB7; break;
    case HELP_ACORDES: helpAcordes(); break;

    }
    break;

  case ACORDE_B7:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_B: acordeB(); acorde=ChordB; break;
    case ACORDE_A7: acordeA7(); acorde=ChordA7; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case ACORDE_A7:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case ACORDE_B7: acordeB7(); acorde=ChordB7; break;
    case HELP_ACORDES: helpAcordes(); break;
    }
    break;

  case RITMO_MARCHA:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case RITMO_BAIAO: ritmoBaiao(); telaRitmo=2; break;
    case HELP_RITMOS: helpRitmos(); break;
    }

    break;

  case RITMO_BAIAO:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case RITMO_MARCHA: ritmoMarcha(); telaRitmo=1; break;
    case RITMO_VALSA: ritmoValsa(); telaRitmo=3; break;
    case HELP_RITMOS: helpRitmos(); break;
    }

    break;

  case RITMO_VALSA:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case RITMO_BAIAO: ritmoBaiao(); telaRitmo=2; break;
    case RITMO_GUARANIA: ritmoGuarania(); telaRitmo=4; break;
    case HELP_RITMOS: helpRitmos(); break;
    }

    break;

  case RITMO_GUARANIA:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case RITMO_VALSA: ritmoValsa(); telaRitmo=3; break;
    case RITMO_CANCAO: ritmoCancao(); telaRitmo=5; break;
    case HELP_RITMOS: helpRitmos(); break;
    }

    break;

  case RITMO_CANCAO:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case RITMO_GUARANIA: ritmoGuarania(); telaRitmo=4; break;
    case RITMO_POP: ritmoPop(); telaRitmo=6; break;
    case HELP_RITMOS: helpRitmos(); break;
    }

    break;

  case RITMO_POP:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    case RITMO_CANCAO: ritmoCancao(); telaRitmo=5; break;
    case HELP_RITMOS: helpRitmos(); break;
    }

    break;

  case HELP_INICIAL:
    check();
    switch(tela) {
    case VOLTAR: telaInicial(); tela=INICIAL; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_COMPASSO:
    check();
    switch(tela) {
    case VOLTAR: selecionarRitmo(); tela=SELECIONAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;


  case HELP_EXERCICIO:
    check();
    switch(tela) {
    case VOLTAR:
      switch(exTela) {
      case 14: exercicio1_44(); tela=EX1_44; telaExercicio=4; break;
      case 24: exercicio2_44(); tela=EX2_44; telaExercicio=4; break;
      case 34: exercicio3_44(); tela=EX3_44; telaExercicio=4; break;
      case 44: exercicio4_44(); tela=EX4_44; telaExercicio=4; break;
      case 13: exercicio1_34(); tela=EX1_34; telaExercicio=3; break;
      case 23: exercicio2_34(); tela=EX2_34; telaExercicio=3; break;
      case 33: exercicio3_34(); tela=EX3_34; telaExercicio=3; break;
      case 43: exercicio4_34(); tela=EX4_34; telaExercicio=3; break;
      case 12: exercicio1_24(); tela=EX1_24; telaExercicio=2; break;
      case 22: exercicio2_24(); tela=EX2_24; telaExercicio=2; break;
      case 32: exercicio3_24(); tela=EX3_24; telaExercicio=2; break;
      case 42: exercicio4_24(); tela=EX4_24; telaExercicio=2; break;
      }
      break;

      case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_PEDAL:
    check();
    switch(tela) {
    case VOLTAR: pedal(); tela=PEDAL; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_PROGRAMAR:
    check();
    switch(tela) {
    case VOLTAR: programarRitmos(); tela=PROGRAMAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_SELRITMO:
    check();
    switch(tela) {
    case VOLTAR:
      switch(selectRitmo) {
      case 2: selRitmo24(); tela=RITMOS_24; break;
      case 3: selRitmo34(); tela=RITMOS_34; break;
      case 4: selRitmo44(); tela=RITMOS_44; break;
      }
      break;

      case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_VER:
    check();
    switch(tela) {
    case VOLTAR:
      switch(telaVer) {
      case 12: verRitmo1_24(); tela=VER_RITMO1_24; break;
      case 22: verRitmo2_24(); tela=VER_RITMO2_24; break;
      case 32: verRitmo3_24(); tela=VER_RITMO3_24; break;
      case 42: verRitmo4_24(); tela=VER_RITMO4_24; break;
      case 13: verRitmo1_34(); tela=VER_RITMO1_34; break;
      case 23: verRitmo2_34(); tela=VER_RITMO2_34; break;
      case 33: verRitmo3_34(); tela=VER_RITMO3_34; break;
      case 43: verRitmo4_34(); tela=VER_RITMO4_34; break;
      case 14: verRitmo1_44(); tela=VER_RITMO1_44; break;
      case 24: verRitmo2_44(); tela=VER_RITMO2_44; break;
      case 34: verRitmo3_44(); tela=VER_RITMO3_44; break;
      case 44: verRitmo4_44(); tela=VER_RITMO4_44; break;
      }
      break;

      case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_AFINAR:
    check();
    switch(tela) {
    case VOLTAR: afinar(); tela=AFINAR; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_DICIONARIO:
    check();
    switch(tela) {
    case VOLTAR: dicionario(); tela=DICIONARIO; break;
    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_ACORDES:
    check();
    switch(tela) {
    case VOLTAR:
      switch(acorde) {
      case ChordC: acordeC(); tela=ACORDE_C; break;
      case ChordD: acordeD(); tela=ACORDE_D; break;
      case ChordE: acordeE(); tela=ACORDE_E; break;
      case ChordF: acordeF(); tela=ACORDE_F; break;
      case ChordG: acordeG(); tela=ACORDE_G; break;
      case ChordA: acordeA(); tela=ACORDE_A; break;
      case ChordB: acordeB(); tela=ACORDE_B; break;
      case ChordB7: acordeB7(); tela=ACORDE_B7; break;
      case ChordA7: acordeA7(); tela=ACORDE_A7; break;
      }
      break;

      case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;

  case HELP_RITMOS:
    check();
    switch(tela) {
    case VOLTAR:
      switch(telaRitmo) {
      case 1: ritmoMarcha(); tela=RITMO_MARCHA; break;
      case 2: ritmoBaiao(); tela=RITMO_BAIAO; break;
      case 3: ritmoValsa(); tela=RITMO_VALSA; break;
      case 4: ritmoGuarania(); tela=RITMO_GUARANIA; break;
      case 5: ritmoCancao(); tela=RITMO_CANCAO; break;
      case 6: ritmoPop(); tela=RITMO_POP; break;

      }
      break;

    case HOME: telaInicial(); tela=INICIAL; break;
    }

    break;
  }

}

